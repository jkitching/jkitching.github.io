<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Joel Kitching DOT com on Joel Kitching</title><link>https://joelkitching.com/</link><description>Recent content in Joel Kitching DOT com on Joel Kitching</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Wed, 05 Jun 2024 00:00:00 +0800</lastBuildDate><atom:link href="https://joelkitching.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Hugo hides posts marked with current date</title><link>https://joelkitching.com/writing/hugo-hiding-today-posts/</link><pubDate>Wed, 05 Jun 2024 00:00:00 +0800</pubDate><guid>https://joelkitching.com/writing/hugo-hiding-today-posts/</guid><description>&lt;p>I had uploaded a post marked with the current date to GitHub, which has an action set up to rebuild Hugo and post to GitHub&amp;rsquo;s static page hosting. The post didn&amp;rsquo;t show.&lt;/p>
&lt;p>I assumed it was because their server was in a different timezone (e.g. PST) and was interpreting the dates as such. But then I loaded up a local server with &lt;code>hugo server&lt;/code> and the post was not listed there either!&lt;/p>
&lt;p>It turns out that Hugo has a setting in &lt;code>config.toml&lt;/code> called &lt;a href="https://gohugo.io/getting-started/configuration/#timezone">&lt;code>timeZone&lt;/code>&lt;/a>.&lt;/p>
&lt;p>According to an issue entitled &lt;a href="https://github.com/gohugoio/hugo/issues/1882#issuecomment-195606655">Add proper timezone support&lt;/a> on Hugo&amp;rsquo;s GitHub tracker:&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>If timzeone &lt;em>[sic]&lt;/em> set in the datetime string: fine, use that&lt;/li>
&lt;li>If timezone set in config (or in page frontmatter), use that&lt;/li>
&lt;li>Else use UTC&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>Well, that&amp;rsquo;s pretty clear. The post wasn&amp;rsquo;t showing up because (a) I hadn&amp;rsquo;t set a value for &lt;code>timeZone&lt;/code>, and (b) it was still yesterday in UTC.&lt;/p>
&lt;p>Adding a timezone has solved all of my woes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">timeZone&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;Asia/Taipei&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="bonus-showing-future-dated-posts">Bonus: showing future-dated posts&lt;/h1>
&lt;p>I almost never write multiple posts in a single day, so my frontmatter only includes the date with &lt;code>YYYY-MM-DD&lt;/code> granularity. I would prefer to spread my posts out to at most one per day, so the solution that I opt for is to future date (e.g. second post of the day gets dated as tomorrow).&lt;/p>
&lt;p>But future-dated posts are hidden by default! Perhaps that&amp;rsquo;s a good idea for dynamically generated websites&amp;hellip; but for something like Hugo, who is going to be sitting around rebuilding when those future dates arrive?&lt;/p>
&lt;p>An easy hack is to add the &lt;code>--buildFuture&lt;/code> argument when invoking &lt;code>hugo&lt;/code>. After adding the flag to &lt;code>.github/workflows/gh-pages.yaml&lt;/code> in this repository, all of my dedicated blog readers can now live in the future. =)&lt;/p></description></item><item><title>Google Photos availability of ZIP exports</title><link>https://joelkitching.com/writing/google-photos-download-zip-availability/</link><pubDate>Tue, 04 Jun 2024 00:00:00 +0800</pubDate><guid>https://joelkitching.com/writing/google-photos-download-zip-availability/</guid><description>&lt;p>Today, I was in the process of exporting a few batches of files from Google Photos. You select up to 500 photos or videos, hit &amp;ldquo;Download&amp;rdquo;, wait a minute or so (depending on the size), and your browser will start downloading the ZIP.&lt;/p>
&lt;p>These are fairly large files (around 8 GB each in my case), and I was just heading out the door, so I had to cancel a few of them.&lt;/p>
&lt;p>Later on, when I pulled out my laptop, I decided on a whim to use the &amp;ldquo;retry&amp;rdquo; functionality on the Chrome &amp;ldquo;Download history&amp;rdquo; page. Lo and behold, it worked! I had assumed the files would be deleted as soon as the connection was closed, but apparently they are kept for quite some time (at least 12 hours or so).&lt;/p>
&lt;p>That then led me to open up an incognito window to attempt the download link there. Somewhat reassuringly, it prompted me to login to my Google account.&lt;/p>
&lt;p>The more you know!&lt;/p></description></item><item><title>Sharing fonts from host to docker instance</title><link>https://joelkitching.com/writing/docker-sharing-host-fonts/</link><pubDate>Mon, 03 Jun 2024 00:00:00 +0800</pubDate><guid>https://joelkitching.com/writing/docker-sharing-host-fonts/</guid><description>&lt;p>As part of writing &lt;a href="https://github.com/jkitching/1pager-printable-html/blob/master/html_to_pdf.sh">html_to_pdf.sh&lt;/a> for programatically printing a webpage to PDF format, I encountered the problem of fonts appearing differently after having been output as PDF. Further investigation revealed the &lt;code>alpine-chrome&lt;/code> Docker image did not have the fonts being used in the HTML document.&lt;/p>
&lt;p>A simple solution&amp;mdash;replace &lt;code>/usr/share&lt;/code> font directories in the Docker image with those of the host:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">docker run --rm &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -v /usr/share/fonts:/usr/share/fonts &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -v /usr/share/fontconfig:/usr/share/fontconfig &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> asia.gcr.io/zenika-hub/alpine-chrome
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And it works!&lt;/p></description></item><item><title>Printable HTML/CSS template for resume</title><link>https://joelkitching.com/writing/printable-html-template/</link><pubDate>Sun, 02 Jun 2024 00:00:00 +0800</pubDate><guid>https://joelkitching.com/writing/printable-html-template/</guid><description>&lt;p>The resume I used for the majority of my life is a relic from university times, when I joined the Computer Science co-op program and applied for oodles of internship placements. Back in the day, I designed the layout in Microsoft Word, with careful formatting constructed of tables, blank lines with font size 1, and painstakingly adjusted margins. Word ran great with wine, and I even had a shell script set up to open a document and print it as PDF.&lt;/p>
&lt;h1 id="comparison-of-authoring-software">Comparison of authoring software&lt;/h1>
&lt;p>Fast forward fifteen years. My old resume still looks great, but I decide to give it a facelift, and update its content in the process. At this point, I have entirely replaced use of Microsoft Word with Google Docs. I attempt using Docs, which turns out to be a very poor experience. I toy with re-installing Word again, but the idea of manually adjusting tables and margins again makes me shiver in fear.&lt;/p>
&lt;p>I start looking at text-based solutions, which makes makes maintainability much simpler. There is a strong cult of software engineers using LaTeX to write resumes, and quite a few templates are available. LaTeX has that signature look to it, which many consider a secret &amp;ldquo;handshake&amp;rdquo; between competent engineers. But IMHO it is not very suitable for pixel-perfect design with elements other than just text. (Feel free to correct me if you feel otherwise!)&lt;/p>
&lt;h1 id="html--css-solution">HTML + CSS solution&lt;/h1>
&lt;p>In the end, I decide HTML + CSS is the perfect tool, since it easily versioned, and mocking up different layouts in CSS is ridiculously simple compared to the likes of Microsoft Word. However, I discover two non-trivial points:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>How can I get the document to look great in a browser for previewing and possibly even publishing purposes? Can the document stretch with the size of the browser viewport?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>How can I export the HTML page to PDF with pixel-perfect accuracy? HTML to PDF conversion programs like pandoc typically have a poor understanding of complex CSS layout rules.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="solution-1pager-printable-html">Solution: 1pager-printable-html&lt;/h1>
&lt;p>After slowly working away at these two problems, I created a template on GitHub for one-page printable HTML + CSS documents. Viewing the HTML in a browser looks similar to viewing a PDF document, with width stretching up to a maximum of 50em. It looks professional, and could even be directly used for publishing documents online. PDF conversion is accomplished by printing the document via headless Chrome, which is the best solution to get pixel-perfect output. I wrote a short shell script which uses a Docker image to spawn a headless Chrome instance and save the PDF document to a specified file.&lt;/p>
&lt;p>GitHub repository is available here, licensed under MIT: &lt;strong>&lt;a href="https://github.com/jkitching/1pager-printable-html">jkitching/1pager-printable-html&lt;/a>&lt;/strong>&lt;/p>
&lt;p>
&lt;img src="screenshot.png" alt="Screenshot of 1pager template in browser next to printed PDF document">
&lt;/p></description></item><item><title>Installing Magisk and LSPosed on emulated Android</title><link>https://joelkitching.com/writing/installing_magisk_lsposed_on_emulated_android/</link><pubDate>Tue, 28 May 2024 00:00:00 +0800</pubDate><guid>https://joelkitching.com/writing/installing_magisk_lsposed_on_emulated_android/</guid><description>&lt;p>After attempting many different ways of getting Magisk to run on Android emulators (including Waydroid and the like), the only way that worked is using the official emulator from Google, along with the instructions from the following Gist:&lt;/p>
&lt;p>&lt;a href="https://gist.github.com/tothi/1a206791c8b77d7e42015183c980657e">tothi/magisk_ramdisk_patch_avd.sh&lt;/a>&lt;/p>
&lt;h1 id="notes">Notes&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;code>userdata.img&lt;/code> needs to be recreated when changing size via the &lt;code>emulator -partition-size&lt;/code> flag, so pick its size carefully! The default size of 6 GB can fill up very quickly.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I placed &lt;code>ramdisk-patched.img&lt;/code> in &lt;code>~/.android/avd/android12-play.avd/&lt;/code> to keep it alongside other files for this AVD.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You may want to avoid using snapshots while getting your AVD setup, but they can be useful later on.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Here are the command-line flags I use to start the emulator:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">emulator @android12-play &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -partition-size &lt;span class="m">16384&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -memory &lt;span class="m">8192&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -no-audio &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -feature -Vulkan &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -gpu host &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -ramdisk ~/.android/avd/android12-play.avd/ramdisk-patched.img
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note:&lt;/strong> I used to specify the number of emulated CPU cores like so: &lt;code>-cores 8&lt;/code>. But for whatever reason, this breaks snapshot functionality.&lt;/p>
&lt;h1 id="userspace-installation">Userspace installation&lt;/h1>
&lt;p>After getting the emulated device up and running with a patched &lt;code>ramdisk.img&lt;/code>, finish setting up Magisk as follows:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Install Magisk by sideloading the APK: &lt;code>adb install Magisk-v27.0.apk&lt;/code>. See the &lt;a href="https://github.com/topjohnwu/Magisk/releases/">GitHub releases page&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Open up Magisk. (Note that the app may not show up in the apps list until Android initial setup has completed.) Follow the prompt requesting for a reboot to perform &amp;ldquo;additional setup&amp;rdquo;.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Copy the LSPosed zygisk ZIP over to the device: &lt;code>adb push LSPosed-v1.9.2-7024-zygisk-release.zip /sdcard/Download/&lt;/code>. LSPosed is no longer under development, so download the &lt;a href="https://github.com/LSPosed/LSPosed/releases/download/v1.9.2/">last available release&lt;/a> from GitHub.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Open up Magisk and select the Modules tab. Choose &amp;ldquo;Install from storage&amp;rdquo; and select the LSPosed ZIP file. After installing, you will be prompted to reboot again.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>After rebooting, you should have a silent notification &amp;ldquo;LSPosed loaded&amp;rdquo;. Tap to open the LSPosed interface, and choose whether you want to add an app shortcut.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Now you can search for modules in the &amp;ldquo;Repository&amp;rdquo; tab and install them!&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Convert iPhone Live Photo to Google Photos motion photo</title><link>https://joelkitching.com/writing/create-google-photos-motion-photo/</link><pubDate>Mon, 27 May 2024 00:00:00 +0800</pubDate><guid>https://joelkitching.com/writing/create-google-photos-motion-photo/</guid><description>&lt;p>Google Photos has two methods of handling motion photos:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>If the photo was uploaded by an Android device, it will already be in Google&amp;rsquo;s custom format, which is essentially a JPEG file with a video file concatenated to the end.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If the photo was uploaded by an iPhone, it will be stored as two separate files on Google servers: HEIC and MOV.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>When downloading motion photos and re-uploading them to a different Google Photos account, the Android case works fine, since everything is packed together as one file. In the iPhone case, however, you will end up uploading the HEIC and MOV files separately, which will not be recognized by Google Photos as a motion photo, and will instead displayed as two separate entities. What&amp;rsquo;s the solution?&lt;/p>
&lt;h1 id="script-for-creating-a-motion-photo">Script for creating a motion photo&lt;/h1>
&lt;p>Download script from GitHub: &lt;a href="https://gist.github.com/jkitching/3fa5a0c238fa825278db83acd05d7742">combine_photo_video.sh&lt;/a>&lt;/p>
&lt;p>This script takes a photo file and a video file, and combines the two into the format recognized by Google Photos. It depends on &lt;a href="https://exiftool.org/">exiftool&lt;/a> for adding the XMP block.&lt;/p>
&lt;p>Simply run the script with three arguments:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">./combine_photo_video.sh &amp;lt;photo_file&amp;gt; &amp;lt;video_file&amp;gt; &amp;lt;output_file&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># For example, combine IMG_9077.heic and IMG_9077.mov:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./combine_photo_video.sh IMG_9077.heic IMG_9077.mov IMG_9077_motion.jpg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Upload the resulting file to Google Photos (either through the app or web version), and you will get a motion photo!&lt;/p>
&lt;h1 id="technical-explanation">Technical explanation&lt;/h1>
&lt;p>Motion photo JPEG files have an extra XMP block. There are &lt;a href="https://linuxreviews.org/Google_Pixel_%22Motion_Photo%22">two different versions in use&lt;/a>. The newer one has the advantage of assuming the client will locate the video file on its own, and appears to work even when specifying the video file length as &amp;ldquo;0&amp;rdquo;:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;Container:Directory&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;rdf:Seq&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;rdf:li&lt;/span> &lt;span class="na">rdf:parseType=&lt;/span>&lt;span class="s">&amp;#34;Resource&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;Container:Item&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">Item:Mime=&lt;/span>&lt;span class="s">&amp;#34;image/jpeg&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">Item:Semantic=&lt;/span>&lt;span class="s">&amp;#34;Primary&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">Item:Length=&lt;/span>&lt;span class="s">&amp;#34;0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">Item:Padding=&lt;/span>&lt;span class="s">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/rdf:li&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;rdf:li&lt;/span> &lt;span class="na">rdf:parseType=&lt;/span>&lt;span class="s">&amp;#34;Resource&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;Container:Item&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">Item:Mime=&lt;/span>&lt;span class="s">&amp;#34;video/mp4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">Item:Semantic=&lt;/span>&lt;span class="s">&amp;#34;MotionPhoto&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">Item:Length=&lt;/span>&lt;span class="s">&amp;#34;0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">Item:Padding=&lt;/span>&lt;span class="s">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/rdf:li&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/rdf:Seq&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/Container:Directory&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>More about the actual code for parsing and extracting video data here: &lt;a href="https://gitlab.gnome.org/GNOME/shotwell/-/issues/233#note_1712445">shotwell issue 233&lt;/a>.&lt;/p>
&lt;h1 id="limitations">Limitations&lt;/h1>
&lt;ul>
&lt;li>Unfortunately, HEIC files need to be converted to JPEG as part of this process.&lt;/li>
&lt;li>Existing XMP data is wiped out as part of this process. But it is unlikely that it exists anyways, unless the image file has been edited with Adobe products.&lt;/li>
&lt;/ul></description></item><item><title>Restarting a process when a signal is received</title><link>https://joelkitching.com/writing/restart-process-on-signal/</link><pubDate>Wed, 10 Apr 2024 00:00:00 +0800</pubDate><guid>https://joelkitching.com/writing/restart-process-on-signal/</guid><description>&lt;p>In larger applications, there is usually a CI/CD process, which tests, builds, and deploys new versions of the software.&lt;/p>
&lt;p>Smaller applications typically start out with a simpler solution. In this case, I have an application running in a &lt;code>screen&lt;/code> session, and I want a git &lt;code>post-receive&lt;/code> hook to automatically &lt;a href="https://joelkitching.com/writing/git-clean-deployment-hook/">update its code&lt;/a> and restart the process.&lt;/p>
&lt;p>&lt;strong>Is it possible to write a one-line Bash wrapper which restarts the application when a specific signal is received?&lt;/strong> &lt;a href="#using-exec-as-a-one-liner">TL;DR: Yes, it is possible.&lt;/a>&lt;/p>
&lt;p>This particular application is not thoroughly robust yet, so I do not want to restart it when the process exits on its own. Thus we have the following requirements:&lt;/p>
&lt;ul>
&lt;li>When the application exits, the wrapper quits with its exit code&lt;/li>
&lt;li>When the wrapper is killed with SIGHUP, restart the application&lt;/li>
&lt;li>When the wrapper is killed with any other signal, kill the application and exit&lt;/li>
&lt;/ul>
&lt;p>Note that since the final goal is to write a compact one-liner, quotes will be omitted where possible.&lt;/p>
&lt;h1 id="tail-recursive-approach">Tail recursive approach&lt;/h1>
&lt;p>In this version, the &lt;code>run&lt;/code> call in the &lt;code>HUP&lt;/code> trap essentially takes over execution of the process. When it pops up to the previous trap, &lt;code>exit&lt;/code> stops execution and propagates the exit code.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">pid&lt;/span>&lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">run&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> restarting
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sleep inf &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">pid&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">wait&lt;/span> &lt;span class="nv">$pid&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;kill $pid 2&amp;gt;/dev/null&amp;#39;&lt;/span> EXIT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;kill $pid; run; exit $?&amp;#39;&lt;/span> HUP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">run
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that we need the extra &lt;code>EXIT&lt;/code> trap to handle the case of killing the wrapper directly. Let&amp;rsquo;s test sending various signals to the parent of &lt;code>sleep&lt;/code> as well as the &lt;code>sleep&lt;/code> process itself:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Send HUP and TERM signals to child process&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">kill&lt;/span> -HUP &lt;span class="k">$(&lt;/span>pgrep -f &lt;span class="s1">&amp;#39;sleep inf&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span> &lt;span class="c1"># exits&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">kill&lt;/span> &lt;span class="k">$(&lt;/span>pgrep -f &lt;span class="s1">&amp;#39;sleep inf&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span> &lt;span class="c1"># exits&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Send HUP and TERM signals to wrapper&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">kill&lt;/span> -HUP &lt;span class="k">$(&lt;/span>ps -o &lt;span class="nv">ppid&lt;/span>&lt;span class="o">=&lt;/span> -p &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>pgrep -f &lt;span class="s1">&amp;#39;sleep inf&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span> &lt;span class="c1"># restarts&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">kill&lt;/span> &lt;span class="k">$(&lt;/span>ps -o &lt;span class="nv">ppid&lt;/span>&lt;span class="o">=&lt;/span> -p &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>pgrep -f &lt;span class="s1">&amp;#39;sleep inf&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span> &lt;span class="c1"># exits&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Send INT signal to wrapper&amp;#39;s process group&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;Ctrl+C&amp;gt; directly on the shell &lt;span class="c1"># exits&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">kill&lt;/span> -INT -- -&lt;span class="k">$(&lt;/span>ps -o &lt;span class="nv">pgid&lt;/span>&lt;span class="o">=&lt;/span> -p &lt;span class="k">$(&lt;/span>ps -o &lt;span class="nv">ppid&lt;/span>&lt;span class="o">=&lt;/span> -p &lt;span class="k">$(&lt;/span>pgrep -f &lt;span class="s1">&amp;#39;sleep inf&amp;#39;&lt;/span>&lt;span class="k">)))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Everything checks out. Next, we will stress-test this script, spamming it with &lt;code>HUP&lt;/code> signals:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">wrapperpid&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>ps -o &lt;span class="nv">ppid&lt;/span>&lt;span class="o">=&lt;/span> -p &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>pgrep -f &lt;span class="s1">&amp;#39;sleep inf&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> true&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="k">$((&lt;/span>count++&lt;span class="k">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">kill&lt;/span> -HUP &lt;span class="nv">$wrapperpid&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nb">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Wait for wrapper to finish restarting child process&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Also try without this sleep call after fixing bugs listed below&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sleep 0.01
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It turns out this invariably causes the script to segfault, since it isn&amp;rsquo;t true tail-optimized recursion&amp;mdash;a stack overflow occurs somewhere around the 2800th restart on my machine.&lt;/p>
&lt;p>Additionally, multiple &lt;code>sleep&lt;/code> processes may end up running at the same time during execution, and there may be multiple &lt;code>sleep&lt;/code> processes hanging around after the segfault occurs (or after killing the wrapper manually). There are two independent problems at play; can you find them? (Hmm, this seems like a great interview question&amp;hellip;)&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The first occurs in the &lt;code>run()&lt;/code> function, after starting a new &lt;code>sleep&lt;/code> process, and before recording its PID: &lt;code>sleep inf &amp;amp; pid=$!&lt;/code>. If the trap is triggered here, the PID will still point to the old &lt;code>sleep&lt;/code> process and the new one will not be killed. The only way to solve this is to disable the trap during this critical section.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The second occurs within the &lt;code>SIGHUP&lt;/code> trap itself: &lt;code>kill $pid; run&lt;/code>. &lt;code>kill&lt;/code> simply delivers a signal to the process, but does not wait for it to end. Since &lt;code>run&lt;/code> goes ahead and starts a new &lt;code>sleep&lt;/code> process, there may be multiple &lt;code>sleep&lt;/code> calls running simultaneously. That said, given enough time, the extra (old) instances will eventually exit. Testing this is therefore slightly tricky. I replaced &lt;code>sleep inf&lt;/code> with &lt;code>( trap 'sleep 1' EXIT; while true; do true; done )&lt;/code> to confirm the problem. We can solve this issue by inserting a &lt;code>wait $pid&lt;/code> in between &lt;code>kill&lt;/code> and &lt;code>run&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Here&amp;rsquo;s a slightly more &amp;ldquo;correct&amp;rdquo; version of the script which takes these two issues into account. Unfortunately, there is nothing we can do about the stack overflow without a rewrite.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">pid&lt;/span>&lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;kill $pid 2&amp;gt;/dev/null&amp;#39;&lt;/span> EXIT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">run&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> restarting
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span> HUP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sleep inf &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">pid&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;kill $pid; wait $pid; run; exit $?&amp;#39;&lt;/span> HUP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">wait&lt;/span> &lt;span class="nv">$pid&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">run
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="infinite-loop-approach">Infinite loop approach&lt;/h1>
&lt;p>In this approach, an infinite while loop continually waits for the process to exit. When this happens, check whether or not the &lt;code>sighup&lt;/code> flag was set in the &lt;code>SIGHUP&lt;/code> trap. If it was, restart the application. Otherwise, exit the while loop.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">pid&lt;/span>&lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">sighup&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;kill $pid 2&amp;gt;/dev/null&amp;#39;&lt;/span> EXIT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;sighup=1; kill $pid&amp;#39;&lt;/span> HUP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$sighup&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -eq &lt;span class="m">1&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">sighup&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> restarting
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sleep inf &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">pid&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">wait&lt;/span> &lt;span class="nv">$pid&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This iterative approach contains two particularly racy conditions. Can you find them? They are both quite similar to those encountered in the recursive approach.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The first is after starting a new &lt;code>sleep&lt;/code> process, and before recording its PID: &lt;code>sleep inf &amp;amp; pid=$!&lt;/code>. This can be solved by disabling the trap during this critical section.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The second is slightly more subtle. When Bash receives a signal while running a built-in command like &lt;code>wait&lt;/code>, it interrupts the command, runs the signal, and then continues to the command right &lt;em>after&lt;/em> the one interrupted. In this case, if &lt;code>wait $pid&lt;/code> is interrupted by &lt;code>SIGHUP&lt;/code>, execution continues after the &lt;code>wait $pid&lt;/code> command. So there is no guarantee the process has been killed yet. To fix this, we add a &lt;code>wait $pid&lt;/code> at the end of the &lt;code>SIGHUP&lt;/code> trap.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Here&amp;rsquo;s the updated version:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">pid&lt;/span>&lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">sighup&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;kill $pid 2&amp;gt;/dev/null&amp;#39;&lt;/span> EXIT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$sighup&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -eq &lt;span class="m">1&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">sighup&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> restarting
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span> HUP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sleep inf &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">pid&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;sighup=1; kill $pid; wait $pid&amp;#39;&lt;/span> HUP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">wait&lt;/span> &lt;span class="nv">$pid&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Unfortunately, it turns out this version also suffers from the segfault issue. Again, my understanding is that if the wrapper gets spammed with &lt;code>HUP&lt;/code> signals, the traps will repeatedly get interrupted, and there will be a huge call stack of traps that eventually exceed the size of the available stack.&lt;/p>
&lt;p>Perhaps we can try to fix this by making the trap just one statement, so that if it is interrupted, there will be nothing to run afterwards? Will Bash be smart enough to optimize these &amp;ldquo;tail recursions&amp;rdquo;?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">pid&lt;/span>&lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">sighup&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;kill $pid 2&amp;gt;/dev/null&amp;#39;&lt;/span> EXIT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$sighup&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -eq &lt;span class="m">1&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">sighup&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> restarting
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sleep inf &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">pid&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;sighup=1&amp;#39;&lt;/span> HUP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">wait&lt;/span> &lt;span class="nv">$pid&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span> HUP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">kill&lt;/span> &lt;span class="nv">$pid&lt;/span> 2&amp;gt;/dev/null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">wait&lt;/span> &lt;span class="nv">$pid&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note the careful order of &lt;code>trap&lt;/code>, &lt;code>kill&lt;/code>, &lt;code>wait&lt;/code>.&lt;/p>
&lt;p>This version results in Bash interspersing our application restarts with &amp;ldquo;bad value&amp;rdquo; warnings. I believe this is related to traps getting interrupted before running to completion, but I was unable to find a viable solution.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">bash: warning: run_pending_traps: bad value in trap_list&lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span>: 0x1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But there is no segfault. Rejoice&amp;mdash;this is our most stable version so far!&lt;/p>
&lt;p>There is actually one more potential issue which exists in this solution and the recursive solution. If the wrapper process is killed in between starting the application and recording its PID (&lt;code>sleep inf &amp;amp; pid=$!&lt;/code>), the child process will continue. I have not been able to reproduce this behaviour without inserting a pause in between these two commands, but I have also not proven that it cannot occur.&lt;/p>
&lt;p>This is a useful and viable version to use, but let&amp;rsquo;s also explore one more option.&lt;/p>
&lt;h1 id="replacing-wrapper-using-exec">Replacing wrapper using exec&lt;/h1>
&lt;p>This strategy replaces the running process with another by using &lt;code>exec&lt;/code>. It unfortunately requires running the script as a file. &lt;a href="#using-exec-as-a-one-liner">Or does it? Heh heh heh&amp;hellip;&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> restarting
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;kill $pid 2&amp;gt;/dev/null&amp;#39;&lt;/span> EXIT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sleep inf &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">pid&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;kill $pid 2&amp;gt;/dev/null; wait $pid; exec &amp;#34;$0&amp;#34; &amp;#34;$@&amp;#34;&amp;#39;&lt;/span> HUP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">wait&lt;/span> &lt;span class="nv">$pid&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The first iteration segfaults when spammed with &lt;code>SIGHUP&lt;/code>. Presumably traps are building up in the call stack before they finish executing until the call stack runs out of memory.&lt;/p>
&lt;p>Additionally, there is a problem where if the &lt;code>HUP&lt;/code> trap hasn&amp;rsquo;t been installed yet, the script will just exit when it receives &lt;code>SIGHUP&lt;/code>. That is the default behaviour of &lt;code>SIGHUP&lt;/code>&amp;mdash;and it is actually quite hard to find a signal &lt;em>without&lt;/em> any default behaviour. I ended up choosing &lt;code>SIGURG&lt;/code>:&lt;/p>
&lt;blockquote>
&lt;p>The operating system sends this signal to a process using a network connection when &amp;ldquo;urgent&amp;rdquo; out of band data is sent to it.&lt;/p>
&lt;/blockquote>
&lt;p>I am going to cut this journey short and say that I tried every possible permutation, and none of them worked. So I turned this model on its head: let the replacement process handle killing the application before spawning a new one:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;pkill -P $$&amp;#39;&lt;/span> EXIT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pkill -P &lt;span class="nv">$$&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pidwait -P &lt;span class="nv">$$&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> restarting
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sleep inf &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;exec &amp;#34;$0&amp;#34; &amp;#34;$@&amp;#34;&amp;#39;&lt;/span> URG
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">wait&lt;/span> &lt;span class="nv">$!&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is the version that worked the best, with one small caveat: if the wrapper is killed before the &lt;code>EXIT&lt;/code> trap is installed, the application process will continue running.&lt;/p>
&lt;p>If this is a concern for you, consider using the infinite loop approach instead. If you would like to play with quines, read onward!&lt;/p>
&lt;h1 id="using-exec-as-a-one-liner">Using exec as a one-liner&lt;/h1>
&lt;p>Ever heard of a &lt;a href="https://en.wikipedia.org/wiki/Quine_(computing)">quine&lt;/a>? It&amp;rsquo;s a program that, when run, will output its own source code.&lt;/p>
&lt;p>Instead of a program outputting its source code, let&amp;rsquo;s write a program which &lt;em>runs&lt;/em> its own source code. Behold:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span> &lt;span class="nb">export&lt;/span> &lt;span class="nv">program&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;echo run myself; eval \&amp;#34;\$program\&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nb">eval&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$program&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This &lt;code>$program&lt;/code>, once invoked, will respawn itself indefinitely. Or rather, until it segfaults. Let&amp;rsquo;s try again!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span> &lt;span class="nb">export&lt;/span> &lt;span class="nv">program&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;echo run myself; exec bash -c \&amp;#34;\$program\&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nb">eval&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$program&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Behold! It really does respawn indefinitely. Pretty neat, huh? Now we shove everything from our script above into the string, and we get:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span> &lt;span class="nb">export&lt;/span> &lt;span class="nv">wrapper&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;trap &amp;#39;pkill -P \$\$&amp;#39; EXIT;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> pkill -P \$\$; pidwait -P \$\$;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> echo restarting; sleep inf &amp;amp;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> trap &amp;#39;exec bash -c \&amp;#34;\$wrapper\&amp;#34;&amp;#39; URG;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> wait \$!&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nb">exec&lt;/span> bash -c &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$wrapper&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And that&amp;rsquo;s all there is to it. =)&lt;/p>
&lt;h1 id="identifying-the-wrapper">Identifying the wrapper&lt;/h1>
&lt;p>Up until now, we have swept the problem of identifying the wrapper PID under the carpet, relying on a crude method of finding the parent PID of the &lt;code>sleep inf&lt;/code> process.&lt;/p>
&lt;p>There are two options here. The first is to save the wrapper&amp;rsquo;s PID in a file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span> &lt;span class="nb">export&lt;/span> &lt;span class="nv">wrapper&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;trap &amp;#39;pkill -P \$\$&amp;#39; EXIT;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> pkill -P \$\$; pidwait -P \$\$;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> echo restarting; sleep inf &amp;amp;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> trap &amp;#39;exec bash -c \&amp;#34;\$wrapper\&amp;#34;&amp;#39; URG;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> wait \$!&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nb">exec&lt;/span> bash -c &lt;span class="s2">&amp;#34;echo \$\$ &amp;gt; wrapper.pid; &lt;/span>&lt;span class="nv">$wrapper&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span> rm wrapper.pid
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Ask wrapper to restart the application:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">kill&lt;/span> -URG &lt;span class="k">$(&lt;/span>cat wrapper.pid&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The second is to assign a custom name to the process, which &lt;code>exec&lt;/code> conveniently provides as the &lt;code>-a&lt;/code> option:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span> &lt;span class="nb">export&lt;/span> &lt;span class="nv">wrapper&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;trap &amp;#39;pkill -P \$\$&amp;#39; EXIT;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> pkill -P \$\$; pidwait -P \$\$;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> echo restarting; sleep inf &amp;amp;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> trap &amp;#39;exec -a app_wrapper bash -c \&amp;#34;\$wrapper\&amp;#34;&amp;#39; URG;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> wait \$!&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nb">exec&lt;/span> -a app_wrapper bash -c &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$wrapper&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Ask wrapper to restart the application:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pkill -f -URG app_wrapper
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="caveat">Caveat&lt;/h1>
&lt;p>If you have made it this far, you may have tried replacing &lt;code>sleep inf&lt;/code> with a script or a function. It&amp;rsquo;s remarkably hard to reliably kill all subprocesses when a parent process is killed. Consider this example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ &lt;span class="o">{&lt;/span> sleep 100&lt;span class="p">;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="k">done&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span> &lt;span class="m">688046&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">kill&lt;/span> &lt;span class="m">688046&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ps ax &lt;span class="p">|&lt;/span> grep &lt;span class="s1">&amp;#39;sleep 100&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">688047&lt;/span> pts/10 S 0:00 sleep &lt;span class="m">100&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To deal this complexity, consider simply killing the entire process group (like Ctrl+C does): &lt;code>kill -- -process_group&lt;/code> (note the extra dash). If you would like to deal with this directly from the wrapper, &lt;code>set -m&lt;/code> might be helpful. It temporarily enables Bash jobs control, which causes every child process to be created in its own separate process group.&lt;/p>
&lt;p>For example, modifying the infinite loop version of the wrapper to handle creating process groups might look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">pid&lt;/span>&lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">sighup&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;kill $pid 2&amp;gt;/dev/null&amp;#39;&lt;/span> EXIT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$sighup&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -eq &lt;span class="m">1&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">sighup&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> restarting
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">set&lt;/span> -m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sleep inf &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">set&lt;/span> +m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">pid&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;sighup=1&amp;#39;&lt;/span> HUP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">wait&lt;/span> &lt;span class="nv">$pid&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span> HUP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">kill&lt;/span> -- -&lt;span class="nv">$pid&lt;/span> 2&amp;gt;/dev/null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">wait&lt;/span> &lt;span class="nv">$pid&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Modifying the exec approach might look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;pgrep -P $$ | xargs -I {} kill -- &amp;#39;&lt;/span>-&lt;span class="o">{}&lt;/span>&lt;span class="s1">&amp;#39; 2&amp;gt;/dev/null&amp;#39;&lt;/span> EXIT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pgrep -P &lt;span class="nv">$$&lt;/span> &lt;span class="p">|&lt;/span> xargs -I &lt;span class="o">{}&lt;/span> &lt;span class="nb">kill&lt;/span> -- &lt;span class="s1">&amp;#39;-{}&amp;#39;&lt;/span> 2&amp;gt;/dev/null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pidwait -P &lt;span class="nv">$$&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> restarting
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> -m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sleep inf &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> +m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;exec &amp;#34;$0&amp;#34; &amp;#34;$@&amp;#34;&amp;#39;&lt;/span> URG
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">wait&lt;/span> &lt;span class="nv">$!&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or, keep that complexity in your application function/script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">target&lt;span class="o">()&lt;/span> &lt;span class="o">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;kill -- -$pid 2&amp;gt;/dev/null&amp;#39;&lt;/span> EXIT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">set&lt;/span> -m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sleep inf &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">pid&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">wait&lt;/span> &lt;span class="nv">$pid&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="addendum">Addendum&lt;/h1>
&lt;p>Remember that the above scripts will keep running until the application decides to exit on its own. If you would like a restart to also occur in that case, then I shall leave that modification as an exercise to the reader.&lt;/p>
&lt;p>Finally, also consider just sending &lt;code>SIGHUP&lt;/code> to your application, and having the wrapper restart it based on its exit code. This is vastly simpler since traps aren&amp;rsquo;t needed:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> true&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> restarting
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sleep inf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[&lt;/span> &lt;span class="nv">$?&lt;/span> -eq &lt;span class="m">129&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nb">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I had tons of fun learning about Bash traps while writing this article. For more information, check out:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mywiki.wooledge.org/SignalTrap">GreyCat&amp;rsquo;s wiki&amp;mdash;SignalTrap&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://superuser.com/questions/1829830/behavior-of-sigint-with-bash">StackExchange&amp;mdash;explanation of WCE (wait and cooperative exit)&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Using git clean in a deployment hook</title><link>https://joelkitching.com/writing/git-clean-deployment-hook/</link><pubDate>Tue, 09 Apr 2024 00:00:00 +0800</pubDate><guid>https://joelkitching.com/writing/git-clean-deployment-hook/</guid><description>&lt;p>A typical post-receive hook for updating a target directory based on the most recent commit might look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">GIT_WORK_TREE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;../myproject&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git checkout -f master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, this does not remove any untracked files or directories in &lt;code>../myproject&lt;/code>. When files are removed or renamed in later commits, their remnants will remain untouched in the deployment directory. How can we get rid of them?&lt;/p>
&lt;p>Enter &lt;code>git clean&lt;/code>! Remove all untracked files and directories like so.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">git clean -fd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -f forces removal of files without prompting&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># or disabling config variable `clean.requireForce`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -d recurses into untracked directories&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But what about all of those extra runtime files like databases and logs&amp;mdash;how do we avoid deleting them? The strategy taken here is to add these files to &lt;code>.gitignore&lt;/code>. &lt;code>git clean&lt;/code> ignores these files by default.&lt;/p>
&lt;p>The other tricky point is that &lt;code>git checkout&lt;/code> should be run before &lt;code>git clean&lt;/code> in order to ensure an up-to-date &lt;code>.gitignore&lt;/code>. Otherwise, runtime files we later remember to add to &lt;code>.gitignore&lt;/code> may be deleted before &lt;code>.gitignore&lt;/code> gets updated.&lt;/p>
&lt;p>Here&amp;rsquo;s what the final hook looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Enable immediate exit on error&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> -e
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Set git directories&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">GIT_WORK_TREE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;../myproject&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Checkout all files in the target directory to match the repository&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Must update .gitignore before running `git clean`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git -c advice.detachedHead&lt;span class="o">=&lt;/span>&lt;span class="nb">false&lt;/span> checkout -f refs/heads/master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Clean untracked files and directories in the target directory&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Do not remove files which are listed within .gitignore&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clean -fd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Terminating a command early on matching stdout conditions</title><link>https://joelkitching.com/writing/terminate-command-on-stdout-conditions/</link><pubDate>Mon, 25 Mar 2024 00:00:00 +0800</pubDate><guid>https://joelkitching.com/writing/terminate-command-on-stdout-conditions/</guid><description>&lt;h1 id="match-and-exit">Match and exit&lt;/h1>
&lt;p>This &lt;a href="https://unix.stackexchange.com/questions/679658/kill-process-once-it-produces-certain-output">StackExchange question&lt;/a> provides a snippet which runs a subprocess, saves its PID, and then ends the process when a certain output string is encountered in its output.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">sh -c &lt;span class="s1">&amp;#39;echo &amp;#34;$$&amp;#34;; exec stdbuf -oL &amp;#34;$0&amp;#34; &amp;#34;$@&amp;#34;&amp;#39;&lt;/span> my-program with its args &lt;span class="p">|&lt;/span> &lt;span class="o">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">IFS&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="nb">read&lt;/span> -r pid &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sed &lt;span class="s1">&amp;#39;/Was exported to:/q&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">kill&lt;/span> -s PIPE &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$pid&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="match-and-exit-with-short-circuit">Match and exit, with short-circuit&lt;/h1>
&lt;p>I encountered a situation in which I wanted to exit early when it was determined that the matching condition would never be met.&lt;/p>
&lt;p>The output of &lt;code>my-program&lt;/code> is a list of newline-separated JSON objects, so each line needs to be processed individually, checking these two conditions:&lt;/p>
&lt;ol>
&lt;li>Success, which should output the entire line (matching JSON object)&lt;/li>
&lt;li>Short-circuit failure, which should not output any text (no match)&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">sh -c &lt;span class="s1">&amp;#39;echo &amp;#34;$$&amp;#34;; exec stdbuf -oL &amp;#34;$0&amp;#34; &amp;#34;$@&amp;#34;&amp;#39;&lt;/span> my-program with its args &lt;span class="p">|&lt;/span> &lt;span class="o">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">IFS&lt;/span>&lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">read&lt;/span> -r pid
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="nb">read&lt;/span> -r line&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Break when the condition occurs, and output the matching JSON object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$line&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> jq -e &lt;span class="s2">&amp;#34;select(.key == \&amp;#34;value\&amp;#34;)&amp;#34;&lt;/span> &amp;gt; /dev/null&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$line&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Break when it is determined that the condition cannot be met&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> ! &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$line&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> jq -e &lt;span class="s2">&amp;#34;select(.key == \&amp;#34;value\&amp;#34;)&amp;#34;&lt;/span> &amp;gt; /dev/null&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">kill&lt;/span> -s PIPE &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$pid&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 2&amp;gt;/dev/null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, &lt;code>jq&lt;/code>&amp;rsquo;s &lt;code>-e&lt;/code> flag will set a failing exit status if the &lt;code>select()&lt;/code> function fails.&lt;/p>
&lt;p>To output the JSON object in the matching case, &lt;code>echo &amp;quot;$line&amp;quot;&lt;/code> is run before breaking out of the loop.&lt;/p>
&lt;h1 id="shorter-conditionals-with-logical-operators">Shorter conditionals with logical operators&lt;/h1>
&lt;p>We can also shorten the conditionals by taking advantage of the fact that &lt;code>select()&lt;/code> will output the matching object:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Break when the condition occurs, and output the matching JSON object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$line&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> jq -ce &lt;span class="s2">&amp;#34;select(.key == \&amp;#34;value\&amp;#34;)&amp;#34;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Break when it is determined that the condition cannot be met&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$line&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> jq -e &lt;span class="s2">&amp;#34;select(.key == \&amp;#34;value\&amp;#34;)&amp;#34;&lt;/span> &amp;gt; /dev/null &lt;span class="o">||&lt;/span> &lt;span class="nb">break&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>jq&lt;/code>&amp;rsquo;s &lt;code>-c&lt;/code> flag ensures that the matching object is printed on one line. The matching case no longer redirects to &lt;code>/dev/null&lt;/code> since we want the output, and the &lt;code>!&lt;/code> negation in the short-circuit case results in using a logical &lt;code>||&lt;/code> instead of &lt;code>&amp;amp;&amp;amp;&lt;/code>.&lt;/p></description></item><item><title>Running SQL queries on CSV data</title><link>https://joelkitching.com/writing/sql-queries-on-csv/</link><pubDate>Sat, 16 Mar 2024 00:00:00 +0800</pubDate><guid>https://joelkitching.com/writing/sql-queries-on-csv/</guid><description>&lt;p>I was recently working with some CSV files pulled from a Samsung Health dump. I wanted to run a few queries on the data in order to familiarize myself with their format and contents. SQL seemed like a natural choice, and it turns out there is a myriad of different ways to directly query CSV data with SQL.&lt;/p>
&lt;p>A few notes:&lt;/p>
&lt;ul>
&lt;li>The first two lines of the file is extraneous information that Samsung Health includes for its own purposes. Hence the &lt;code>tail -n +2&lt;/code> command.&lt;/li>
&lt;li>It turns out that there is one more header value than in the data rows themselves. Some of these tools are not particularly happy about this, and so the &lt;code>sed&lt;/code> command removes the very last (empty) header value.&lt;/li>
&lt;/ul>
&lt;h1 id="q">q&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">tail -n +2 device_profiles.csv &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> q -d, -H -b -O -T &lt;span class="s1">&amp;#39;select * from -&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> less -S
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="trdsql">trdsql&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">tail -n +2 device_profiles.csv &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> trdsql -ih -icsv -oat &lt;span class="s1">&amp;#39;select * from -&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> less -S
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="sqlite3">sqlite3&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">tail -n +2 device_profiles.csv &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> sqlite3 -csv :memory: &lt;span class="s1">&amp;#39;.import /dev/stdin stdin&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;.mode table&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;select * from stdin&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> less -S
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="duckdb">duckdb&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">tail -n +2 device_profiles.csv &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> sed &lt;span class="s1">&amp;#39;s@,$@@&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> duckdb -table -cmd &lt;span class="s1">&amp;#39;create table stdin as select * from read_csv_auto(&amp;#34;/dev/stdin&amp;#34;); select * from stdin;&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> less -S
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="csvlook">csvlook&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">tail -n +2 device_profiles.csv &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> sed &lt;span class="s1">&amp;#39;s@,$@@&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> csvsql --query &lt;span class="s1">&amp;#39;select * from stdin&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> csvlook &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> less -S
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Creating a JSON database of photos and albums using Google Photos API</title><link>https://joelkitching.com/writing/google-photos-api-database/</link><pubDate>Tue, 12 Mar 2024 00:00:00 +0800</pubDate><guid>https://joelkitching.com/writing/google-photos-api-database/</guid><description>&lt;p>It turns out that using the Google Photos API is &lt;a href="https://joelkitching.com/writing/google-photos-api-limitations/">not particularly suited&lt;/a> to organizing your photos collection. On the other hand, the API makes it easy to create a listing of all photos and albums in your collection.&lt;/p>
&lt;p>For the case of creating a simple file-based JSON database, I wanted a command-line driven solution, so I used &lt;a href="https://github.com/Byron/google-apis-rs/tree/main/gen/photoslibrary1-cli">photoslibrary1-cli&lt;/a>.&lt;/p>
&lt;h1 id="authentication">Authentication&lt;/h1>
&lt;p>The photoslibrary1-cli &lt;a href="https://byron.github.io/google-apis-rs/google_photoslibrary1_cli/index.html">documentation&lt;/a> claims to include a client secrets file for public use, but it no longer works.&lt;/p>
&lt;p>Instead, &lt;a href="https://support.google.com/cloud/answer/6158849">you will need to create your own&lt;/a>:&lt;/p>
&lt;ol>
&lt;li>Set up a project on Google Cloud Console&lt;/li>
&lt;li>Enable the Google Photos API&lt;/li>
&lt;li>Choose the type of credentials to create (I used OAuth 2.0)&lt;/li>
&lt;li>Download a JSON client secrets file&lt;/li>
&lt;/ol>
&lt;p>Then, copy your client secrets file into &lt;code>./google-service-cli/photoslibrary1-secret.json&lt;/code>, and authenticate with the browser (if using OAuth 2.0) by running any photoslibrary1-cli command, e.g. &lt;code>photoslibrary1 media-items list&lt;/code>:&lt;/p>
&lt;blockquote>
&lt;p>Please direct your browser to [URL] and follow the instructions displayed there.&lt;/p>
&lt;/blockquote>
&lt;h1 id="pagination">Pagination&lt;/h1>
&lt;p>photoslibrary1-cli does not handle pagination, so I wrote &lt;a href="https://gist.github.com/jkitching/236f62745c00a8d0578759e12b3f4502">photoslibrary1_paginated.sh&lt;/a> to do the extra bookkeeping.&lt;/p>
&lt;p>It takes four arguments:&lt;/p>
&lt;ol>
&lt;li>&lt;code>--target-array&lt;/code>: The property name which stores the list of results for the given request. &lt;code>mediaItems&lt;/code>, &lt;code>albums&lt;/code>, or &lt;code>sharedAlbums&lt;/code>.&lt;/li>
&lt;li>&lt;code>--command&lt;/code>: The photoslibrary1-cli command to run. These are simply arguments forwarded directly to &lt;code>photoslibrary1&lt;/code>.&lt;/li>
&lt;li>&lt;code>--output-name&lt;/code>: The name of the file to which items will be concatenated is &lt;code>&amp;lt;output-name&amp;gt;.json&lt;/code>.&lt;/li>
&lt;li>&lt;code>--page-token-arg&lt;/code>: I believe this may be a quirk of the way photoslibrary1-cli was written. Sometimes page tokens are provided as &lt;code>-p page-token=&amp;lt;page-token&amp;gt;&lt;/code> and sometimes as &lt;code>-r page-token=&amp;lt;page-token&amp;gt;&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>Page token is saved as &lt;code>&amp;lt;output-name&amp;gt;.token&lt;/code>. The script can be safely interrupted with Ctrl+C. Just re-run with the same &lt;code>--output-name&lt;/code> to resume.&lt;/p>
&lt;h1 id="json-database-structure">JSON database structure&lt;/h1>
&lt;p>This is how we plan to structure our database:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">./media-items.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./albums.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./albums/ALBUM_ID.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./shared-albums.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./shared-albums/ALBUM_ID.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./media-item-to-albums/MEDIA_ITEM_ID.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./media-item-to-shared-albums/MEDIA_ITEM_ID.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Each file contains one JSON object per line. Let&amp;rsquo;s build up the database step-by-step.&lt;/p>
&lt;h1 id="retrieve-a-list-of-media-items">Retrieve a list of media items&lt;/h1>
&lt;p>Save information about each media item (photo or video) into &lt;code>media-items.json&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">./photoslibrary1_paginated.sh &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --target-array mediaItems &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --command &lt;span class="s1">&amp;#39;media-items list&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --output-name media-items &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --page-token-arg p
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="retrieve-a-list-of-albums">Retrieve a list of albums&lt;/h1>
&lt;p>Albums that &lt;strong>you created&lt;/strong> are listed here, even if they are shared with others. Save to &lt;code>albums.json&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">./photoslibrary1_paginated.sh &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --target-array albums &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --command &lt;span class="s1">&amp;#39;albums list&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --output-name albums &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --page-token-arg p
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="retrieve-a-list-of-shared-albums">Retrieve a list of shared albums&lt;/h1>
&lt;p>Albums that &lt;strong>others shared with you&lt;/strong> are listed here. Save to &lt;code>shared-albums.json&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">./photoslibrary1_paginated.sh &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --target-array sharedAlbums &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --command &lt;span class="s1">&amp;#39;shared-albums list&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --output-name shared-albums &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --page-token-arg p
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="retrieve-a-list-of-media-items-in-each-album">Retrieve a list of media items in each album&lt;/h1>
&lt;p>For each album, retrieve a list of media items. Save to &lt;code>albums/ALBUM_ID.json&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">mkdir albums
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> album in &lt;span class="sb">`&lt;/span>cat albums.json &lt;span class="p">|&lt;/span> jq -r &lt;span class="s1">&amp;#39;.id&amp;#39;&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$album&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ./photoslibrary1_paginated.sh &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --target-array mediaItems &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --command &lt;span class="s2">&amp;#34;media-items search -r . album-id=&lt;/span>&lt;span class="nv">$album&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --output-name &lt;span class="s2">&amp;#34;albums/&lt;/span>&lt;span class="nv">$album&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> --page-token-arg r
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="retrieve-a-list-of-media-items-in-each-shared-album">Retrieve a list of media items in each shared album&lt;/h1>
&lt;p>For each shared album, retrieve a list of media items. Save to &lt;code>shared-albums/ALBUM_ID.json&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">mkdir shared-albums
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> album in &lt;span class="sb">`&lt;/span>cat shared-albums.json &lt;span class="p">|&lt;/span> jq -r &lt;span class="s1">&amp;#39;.id&amp;#39;&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$album&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ./photoslibrary1_paginated.sh &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --target-array mediaItems &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --command &lt;span class="s2">&amp;#34;media-items search -r . album-id=&lt;/span>&lt;span class="nv">$album&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --output-name &lt;span class="s2">&amp;#34;shared-albums/&lt;/span>&lt;span class="nv">$album&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> --page-token-arg r
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="map-media-items-to-albums-containing-them">Map media items to albums containing them&lt;/h1>
&lt;p>For each media item, if one or more albums contain the media item, create a file listing those albums. Save to &lt;code>media-item-to-albums/MEDIA_ITEM_ID.json&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">mkdir media-item-to-albums
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> fname in albums/*.json&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">album_id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$fname&lt;/span> &lt;span class="p">|&lt;/span> sed -e &lt;span class="s1">&amp;#39;s@\.json$@@&amp;#39;&lt;/span> -e &lt;span class="s1">&amp;#39;s@^albums/@@&amp;#39;&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$album_id&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> media_id in &lt;span class="sb">`&lt;/span>cat &lt;span class="nv">$fname&lt;/span> &lt;span class="p">|&lt;/span> jq -r &lt;span class="s1">&amp;#39;.id&amp;#39;&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> touch &lt;span class="s2">&amp;#34;media-item-to-albums/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">media_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">.json&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> grep &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$album_id&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> albums.json &amp;gt;&amp;gt; &lt;span class="s2">&amp;#34;media-item-to-albums/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">media_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">.json&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="map-media-items-to-shared-albums-containing-them">Map media items to shared albums containing them&lt;/h1>
&lt;p>For each media item, if one or more shared albums contain the media item, create a file listing those albums. Save to &lt;code>media-item-to-shared-albums/MEDIA_ITEM_ID.json&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">mkdir media-item-to-shared-albums
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> fname in shared-albums/*.json&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">album_id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$fname&lt;/span> &lt;span class="p">|&lt;/span> sed -e &lt;span class="s1">&amp;#39;s@\.json$@@&amp;#39;&lt;/span> -e &lt;span class="s1">&amp;#39;s@^shared-albums/@@&amp;#39;&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$album_id&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> media_id in &lt;span class="sb">`&lt;/span>cat &lt;span class="nv">$fname&lt;/span> &lt;span class="p">|&lt;/span> jq -r &lt;span class="s1">&amp;#39;.id&amp;#39;&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> touch &lt;span class="s2">&amp;#34;media-item-to-shared-albums/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">media_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">.json&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> grep &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$album_id&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> shared-albums.json &amp;gt;&amp;gt; &lt;span class="s2">&amp;#34;media-item-to-shared-albums/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">media_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">.json&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And that&amp;rsquo;s all!&lt;/p></description></item><item><title>Unreasonable limitations of Google Photos API</title><link>https://joelkitching.com/writing/google-photos-api-limitations/</link><pubDate>Mon, 04 Mar 2024 00:00:00 +0800</pubDate><guid>https://joelkitching.com/writing/google-photos-api-limitations/</guid><description>&lt;p>&lt;strong>Beware:&lt;/strong> Google Photos API is &lt;em>not&lt;/em> suitable for reorganizing your photo collection. From &lt;a href="https://developers.google.com/photos/library/guides/manage-albums">Google for Developers documentation&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>batchAddMediaItems&lt;/code>: Note that you can only add media items that have been uploaded by your application to albums that your application has created.&lt;/p>
&lt;p>&lt;code>batchRemoveMediaItems&lt;/code>: Note that you can only remove media items that your application has added to an album or that have been created in an album as part of an upload.&lt;/p>
&lt;/blockquote>
&lt;p>In other words, unless you are fully managing the contents of your Google Photos account via the API (uploading photos, creating albums, adding photos to albums), Google Photos API is only useful for &lt;strong>reading&lt;/strong>, and not for &lt;strong>writing&lt;/strong>.&lt;/p>
&lt;p>Issues on the Google public issue tracker (&lt;a href="https://issuetracker.google.com/issues/109505022">b/109505022&lt;/a>, &lt;a href="https://issuetracker.google.com/issues/132274769">b/132274769&lt;/a>) date back to as early as 2018, so it seems unlikely to change anytime soon.&lt;/p>
&lt;p>Thanks to the article &lt;a href="https://www.blogbyben.com/2020/01/google-photos-api-giveth-and-then.html">Google Photos API Giveth, and Then Promptly Taketh Away&lt;/a> for spelling this out.&lt;/p></description></item><item><title>Motion photos not recognized by Google Photos in shared albums</title><link>https://joelkitching.com/writing/google-photos-motion-shared-album/</link><pubDate>Tue, 27 Feb 2024 00:00:00 +0800</pubDate><guid>https://joelkitching.com/writing/google-photos-motion-shared-album/</guid><description>&lt;p>After adding a motion photo into a shared album, Google Photos &lt;em>sometimes&lt;/em> fails to show the triangular ▶ play button.&lt;/p>
&lt;p>Right from the horse&amp;rsquo;s mouth:&lt;/p>
&lt;blockquote>
&lt;p>Google Photos can be a bit buggy with Live Photos in shared albums - the best way I’ve found to combat this is to just upload to Google Photos first (don’t add them to a shared album just yet), wait a bit (can be anywhere between a few minutes to a few hours), then after some time, add them to the shared album.&lt;/p>
&lt;p>You can also check if the Live Photo is fully processed by going on photos.google.com in a web browser, and clicking on the photo - if the play button icon is fully white, the motion will be there; if the icon is faded, it’s still processing.&lt;/p>
&lt;/blockquote>
&lt;p>&amp;mdash; &lt;a href="https://www.reddit.com/r/googlephotos/comments/vhjjn6/comment/id7tn0i/">Reddit thread&lt;/a>&lt;/p>
&lt;p>The solution is simple: wait for the photo to finish processing (the triangular ▶ play button starts working), and &lt;em>then&lt;/em> add it to the shared album.&lt;/p>
&lt;p>It&amp;rsquo;s also interesting to note that this could affect photos shared via the &amp;ldquo;Partner sharing&amp;rdquo; feature. YMMV.&lt;/p></description></item><item><title>Coding a simple algorithm with ChatGPT</title><link>https://joelkitching.com/writing/chatgpt-simple-algorithm/</link><pubDate>Thu, 06 Apr 2023 00:00:00 +0800</pubDate><guid>https://joelkitching.com/writing/chatgpt-simple-algorithm/</guid><description>&lt;p>Lately, it&amp;rsquo;s almost impossible to open up Hacker News without encountering an article extolling the virtues of LLM-assisted programming. I wanted to give it a try&amp;mdash;but I decided to start with something small.&lt;/p>
&lt;h1 id="problem-definition">Problem definition&lt;/h1>
&lt;blockquote>
&lt;p>Given an input array of 0&amp;rsquo;s and 1&amp;rsquo;s, produce an array where &lt;code>output[i]&lt;/code> gives the consecutive count of &lt;code>input[i]&lt;/code> up until position &lt;code>i&lt;/code>.&lt;/p>
&lt;p>For example:&lt;/p>
&lt;ul>
&lt;li>&lt;code>1110100001&lt;/code> → &lt;code>1231112341&lt;/code>&lt;/li>
&lt;li>&lt;code>1010101&lt;/code> → &lt;code>1111111&lt;/code>&lt;/li>
&lt;li>&lt;code>1111111&lt;/code> → &lt;code>1234567&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Write a Python function called &lt;code>consecutive_count&lt;/code>, which takes a list as its input, and outputs a list.&lt;/p>
&lt;/blockquote>
&lt;h1 id="attempt-1">Attempt #1&lt;/h1>
&lt;p>Fairly simple, right? I feed this text verbatim into ChatGPT, and it gives me this function:&lt;/p>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">consecutive_count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">n&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">output&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">count&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">output&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>Looks like it&amp;rsquo;s counting consecutive 1&amp;rsquo;s, resetting the count to 0 when it encounters a 0. This is confirmed by both ChatGPT&amp;rsquo;s explanation, and the example it provides:&lt;/p>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">consecutive_count&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;h1 id="attempt-2">Attempt #2&lt;/h1>
&lt;p>Perhaps my explanation is not clear enough for ChatGPT to interpret the correct meaning? I try a variation of the above prompt:&lt;/p>
&lt;blockquote>
&lt;p>Given an input array of arbitrary elements, produce an array where &lt;code>output[i]&lt;/code> gives the consecutive count of &lt;code>input[i]&lt;/code> up until position &lt;code>i&lt;/code>, starting at 1.&lt;/p>
&lt;p>For example:&lt;/p>
&lt;ul>
&lt;li>1110100001 → 1231112341&lt;/li>
&lt;li>1010101 → 1111111&lt;/li>
&lt;li>1111111 → 1234567&lt;/li>
&lt;/ul>
&lt;p>Write a Python function called &lt;code>consecutive_count&lt;/code>, which takes a list as its input, and outputs a list.&lt;/p>
&lt;/blockquote>
&lt;p>This time, ChatGPT seems to think that it should output the &lt;em>overall&lt;/em> count of each encountered item, without resetting the count after a contiguous group ends:&lt;/p>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">consecutive_count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_list&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">output_list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">element&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">input_list&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">element&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">element&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">element&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">output_list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">element&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">output_list&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>But the example input/output it provides doesn&amp;rsquo;t quite match this algorithm, leading me to believe that its internal representation of the problem is inconsistent.&lt;/p>
&lt;h1 id="attempt-3">Attempt #3&lt;/h1>
&lt;p>Perhaps we&amp;rsquo;re overloading ChatGPT with too much information? Let&amp;rsquo;s eliminate specific references to 0 and 1 in the prompt, avoid algebraic terms like &lt;code>input[i]&lt;/code>, and do away with the examples.&lt;/p>
&lt;blockquote>
&lt;p>Given an input list of arbitrary items, produce a list of equivalent length, which provides the consecutive count of equivalent items up until that point in the input list. Counts start at 1.&lt;/p>
&lt;p>Implement this with a Python function called &lt;code>consecutive_count&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;p>Success! This time, it spits out a working function:&lt;/p>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">consecutive_count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lst&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">lst&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">counts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">prev_item&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lst&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">lst&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">prev_item&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">counts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">counts&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">counts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">prev_item&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">item&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">counts&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>It&amp;rsquo;s a little on the verbose side though. Let&amp;rsquo;s try:&lt;/p>
&lt;blockquote>
&lt;p>Rewrite &lt;code>consecutive_count&lt;/code> to use less temporary variables.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">consecutive_count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lst&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">counts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lst&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lst&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">lst&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">lst&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">counts&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">counts&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">counts&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>That is much more concise! Thank you, ChatGPT.&lt;/p>
&lt;h1 id="enter-functional-programming">Enter functional programming&lt;/h1>
&lt;p>Let&amp;rsquo;s see if ChatGPT is fluent in functional programming:&lt;/p>
&lt;blockquote>
&lt;p>Rewrite &lt;code>consecutive_count&lt;/code> to use functional programming.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">itertools&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">groupby&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">consecutive_count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_list&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">groups&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">groupby&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_list&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">group&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">group&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">groups&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>Well&amp;hellip; that&amp;rsquo;s not quite right. This function outputs the size of each contiguous group of equivalent items.&lt;/p>
&lt;blockquote>
&lt;p>That&amp;rsquo;s not quite right! This function just outputs the sizes of each group, instead of counting up from 1 within each group.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">itertools&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">groupby&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">consecutive_count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_list&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">output_list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">group&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">groupby&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_list&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">group_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">output_list&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">group_size&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">output_list&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>That&amp;rsquo;s better! But a bit on the verbose side.&lt;/p>
&lt;blockquote>
&lt;p>That looks good, but avoid using a &lt;code>for&lt;/code> loop.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">itertools&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">groupby&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">consecutive_count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lst&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">groupby&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lst&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>Not bad at all. However, some people (such as myself) find double list comprehensions somewhat difficult to read.&lt;/p>
&lt;blockquote>
&lt;p>That looks fantastic. Could we break the list comprehension into two steps?&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">itertools&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">groupby&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">chain&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">consecutive_count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_list&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">groups&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">groupby&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_list&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">chain&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_iterable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">g&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">groups&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>Wow! I actually had to look up &lt;a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable">&lt;code>chain.from_iterable&lt;/code>&lt;/a> to see what was going on here. It&amp;rsquo;s basically a generator-aware flatten function, which is just what we need.&lt;/p>
&lt;h1 id="alternative-solution">Alternative solution&lt;/h1>
&lt;p>Originally, I had a solution in mind which uses &lt;code>reduce&lt;/code>. Let&amp;rsquo;s see if we can guide ChatGPT to use this method:&lt;/p>
&lt;blockquote>
&lt;p>Please rewrite &lt;code>consecutive_count&lt;/code> to make use of &lt;code>reduce&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">itertools&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">groupby&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">functools&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">reduce&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">consecutive_count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lst&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">groups&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">lambda&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="n">groupby&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lst&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">counts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">lambda&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">groups&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">reduce&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">lambda&lt;/span> &lt;span class="n">acc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">acc&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">counts&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>This is not quite what I was looking for&amp;hellip; it basically uses &lt;code>reduce&lt;/code> as a glorified &lt;code>map&lt;/code>. Let&amp;rsquo;s try again.&lt;/p>
&lt;blockquote>
&lt;p>Please rewrite &lt;code>consecutive_count&lt;/code> to make use of the &lt;code>reduce&lt;/code> function. There should be no need to use &lt;code>groupby&lt;/code> or &lt;code>map&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">functools&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">reduce&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">consecutive_count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lst&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">accumulate_counts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">acc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">acc&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">acc&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">acc&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">acc&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">acc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">acc&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">reduce&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">accumulate_counts&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lst&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[])]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>This is actually really close to a working implementation. For each item encountered, a tuple is added to the accumulator output list. The first element of the tuple is the &lt;em>current item&lt;/em> (the value at &lt;code>lst[i]&lt;/code>), and the second element is the &lt;em>count&lt;/em> (the output of our algorithm). Finally, the first element of each tuple is stripped off in a final list comprehension.&lt;/p>
&lt;p>But for some reason, ChatGPT is &lt;em>modifying&lt;/em> the last element of the accumulator output list in the &lt;code>if&lt;/code> clause of the conditional.&lt;/p>
&lt;blockquote>
&lt;p>That looks really close. But the &lt;code>if&lt;/code> clause of the conditional should be &lt;em>appending&lt;/em> to &lt;code>acc&lt;/code> instead of modifying its last value.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">functools&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">reduce&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">consecutive_count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lst&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">accumulate_counts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">acc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">acc&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">acc&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">acc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">acc&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">acc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">acc&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">reduce&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">accumulate_counts&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lst&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[])]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>Wow! We did it! Now let&amp;rsquo;s iterate for style:&lt;/p>
&lt;blockquote>
&lt;p>Great! Can you factor out the &lt;code>append&lt;/code> call? The second element of the tuple passed to &lt;code>append&lt;/code> should be a conditional expression. Assume that &lt;code>acc&lt;/code> has at least one element in it, so there is no need to check for &lt;code>acc&lt;/code> in the conditional.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">functools&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">reduce&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">consecutive_count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lst&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">accumulate_counts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">acc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">acc&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">acc&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">acc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">acc&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">reduce&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">accumulate_counts&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lst&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[(&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">)])][&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>Almost there!&lt;/p>
&lt;blockquote>
&lt;p>Awesome. Let&amp;rsquo;s turn &lt;code>accumulate_counts&lt;/code> into a lambda and assign it to a variable. Call it &lt;code>acc_counts&lt;/code> instead.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">functools&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">reduce&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">consecutive_count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lst&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">acc_counts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">lambda&lt;/span> &lt;span class="n">acc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">acc&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">[(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">acc&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">acc&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">reduce&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">acc_counts&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lst&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[(&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">)])][&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>And we&amp;rsquo;re done.&lt;/p>
&lt;h1 id="extra-points">Extra points&lt;/h1>
&lt;p>Let&amp;rsquo;s explore how nimble ChatGPT is on its feet.&lt;/p>
&lt;blockquote>
&lt;p>I&amp;rsquo;d like to modify this &lt;code>reduce&lt;/code> implementation to store &lt;em>only one&lt;/em> instance of the current item. The accumulator data format should look like: &lt;code>(current_item, [output_list])&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">functools&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">reduce&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">consecutive_count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lst&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">acc_counts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">lambda&lt;/span> &lt;span class="n">acc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">acc&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">acc&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">acc&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">acc_counts&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">lst&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>Subscripting a lambda&amp;hellip; that&amp;rsquo;s&amp;hellip; cute? Two more prompts to get ChatGPT back on track:&lt;/p>
&lt;blockquote>
&lt;p>That looks close, but you forgot to run &lt;code>reduce&lt;/code>!&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>There&amp;rsquo;s no need for the conditional on the last line checking &lt;code>lst&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">functools&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">reduce&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">consecutive_count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lst&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">acc_counts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">lambda&lt;/span> &lt;span class="n">acc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">acc&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">acc&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">acc&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">reduce&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">acc_counts&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lst&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[]))[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>And we did it! ChatGPT, you are certainly impressive.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>I have a confession to make: this process was nowhere near as simple as this blog post makes it sound.&lt;/p>
&lt;ul>
&lt;li>Initially, I went down a huge rabbit hole of using the initial definition of the problem (specifying 0&amp;rsquo;s and 1&amp;rsquo;s). I asked for an implementation, copied errors or incorrect output from Python back into the ChatGPT prompt, and repeated this process about 10 times. ChatGPT didn&amp;rsquo;t seem to grasp the concept, providing many variations, none of which were correct.&lt;/li>
&lt;li>Then, I tried to &amp;ldquo;teach&amp;rdquo; ChatGPT how to perform the algorithm step-by-step. But once we reached the conditional inside the accumulator function (we were working on the &lt;code>reduce&lt;/code> implementation), ChatGPT was &lt;strong>convinced&lt;/strong> that the last value of the accumulator list needed to be &lt;em>replaced&lt;/em> instead of appending a new tuple. &lt;strong>NOTHING&lt;/strong> I said could convince it otherwise.
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="n">acc&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">acc&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">acc&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">acc&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">acc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;/li>
&lt;li>At this point, I began to doubt whether ChatGPT even understood the problem in the first place. I prompted it with the problem definition, provided several input/output examples, and asked it to generate some examples on its own. Many of the examples that ChatGPT generated were incorrect. I kept fixing its examples and prompting them back, hoping that its internal representation would eventually align. But this approach was definitely a dead end! In fact, sometimes I would fix an example, and ChatGPT would make slight modifications when acknowledging and repeating the example back to me.&lt;/li>
&lt;li>Finally, I tried the approach that ultimately worked for this blog post: rewriting the problem definition to be more general, without specifying the input constraints of using only 0&amp;rsquo;s and 1&amp;rsquo;s. I suspect that this algorithm may exist in ChatGPT&amp;rsquo;s training data, but perhaps without the constraint of using only 0&amp;rsquo;s and 1&amp;rsquo;s. Maybe once that constraint was removed, ChatGPT had an easier time mapping to the correct answer internally.&lt;/li>
&lt;/ul>
&lt;p>So how does it feel to write code with your own personal assistant? Initially, it felt maddening, like talking to a very smart child who could implement complex algorithms, but refused to make fixes to said algorithm when asked.&lt;/p>
&lt;p>Once I got past the initial difficulty of properly communicating the problem, and started to get the hang of prompting, it was actually quite a rewarding experience. I could be as vague or specific as I wanted, and ChatGPT was generally very accommodating. Of course, there were still certain cases where I had to revise my prompt. For example, when asking ChatGPT to write a &lt;strong>slightly&lt;/strong> more concise version, it might go from eight lines directly to a one-liner. Prompting is still somewhat of an art.&lt;/p>
&lt;p>It also strangely felt like ChatGPT and I were working as a team, which is why I keep falling back to the &amp;ldquo;we&amp;rdquo; pronoun in this blog post. I found myself politely asking ChatGPT for help, and praising it (him? her? them?) for good answers.&lt;/p>
&lt;p>I initially set out on this adventure specifically with the &lt;code>reduce&lt;/code> solution in mind. But I actually prefer the solution that ChatGPT invented, which uses &lt;code>groupby&lt;/code> and &lt;code>from_iterable&lt;/code>. The fact that ChatGPT can understand the &amp;ldquo;gist&amp;rdquo; of what I&amp;rsquo;m trying to accomplish, and effortlessly translate between different implementations, is infinitely cool. And also provides for learning opportunities!&lt;/p>
&lt;p>I don&amp;rsquo;t have access to GPT-4 yet, but I would be very curious to see how it performs with the initial problem definitions given in &lt;a href="#attempt-1">Attempt #1&lt;/a> and &lt;a href="#attempt-2">Attempt #2&lt;/a>. I invite any happy readers to paste those prompts into GPT-4 and let me know what happens!&lt;/p></description></item><item><title>GNOME development with x11docker containers</title><link>https://joelkitching.com/writing/x11docker-gnome-containers/</link><pubDate>Mon, 05 Dec 2022 00:00:00 +0800</pubDate><guid>https://joelkitching.com/writing/x11docker-gnome-containers/</guid><description>&lt;p>
&lt;img src="gnome-containers.png" alt="Running multiple containers of different GNOME versions">
&lt;/p>
&lt;p>In &lt;a href="https://joelkitching.com/writing/gnome-extension-dev/">A brief foray into GNOME extension development&lt;/a>, we looked at the general process of updating a GNOME extension to work on a newer version of GNOME.&lt;/p>
&lt;p>The most obvious development environment for working on GNOME extensions is an active GNOME session. But I encountered numerous pain points with this setup:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Reloading extensions:&lt;/strong> This is possible in X by reloading &lt;code>gnome-shell&lt;/code> with Alt+F2 and &lt;code>r&lt;/code>, but impossible when running in Wayland.&lt;/li>
&lt;li>&lt;strong>Looking Glass usage:&lt;/strong> Looking Glass (accessible via Alt+F2 and &lt;code>lg&lt;/code>) is the Chrome Developer Tools of GNOME. But while open, it blocks interaction with the UI, which can be quite inconvenient. We may also want to experiment with some non-reversible changes to the GNOME DOM, after which a restart is needed.&lt;/li>
&lt;li>&lt;strong>Testing different versions:&lt;/strong> New versions of GNOME are released every six months. There are still plenty of folks using old versions of GNOME. Short of booting up a VM, how do we ensure our extension is compatible with previous GNOME versions?&lt;/li>
&lt;/ul>
&lt;p>Today, we will learn how to run a slimmed-down GNOME environment of any arbitrary version within a container.&lt;/p>
&lt;h1 id="enter-the-star-x11docker">Enter the star: x11docker&lt;/h1>
&lt;p>&lt;a href="https://github.com/mviereck/x11docker">x11docker&lt;/a> is a fairly mature project, designed to &amp;ldquo;run GUI applications in Docker or podman containers&amp;rdquo;. It looks like the focus of the project is on sandboxing and security, but turns out to work remarkably well for our own development and testing purposes, without needing to bring up a full virtual machine.&lt;/p>
&lt;p>
&lt;img src="x11docker-xephyr.png" alt="x11docker running with xephyr">
&lt;/p>
&lt;p>x11docker can be used to run either a single application, which is then seamlessly integrated into your current window manager, or a full desktop environment, which is what we will be using. The project provides some pre-built Docker images such as &lt;code>x11docker/gnome&lt;/code> to get started, but we will need to build our own since we have specific requirements of the GNOME version being used.&lt;/p>
&lt;h1 id="x11docker-installation">x11docker installation&lt;/h1>
&lt;p>First, you&amp;rsquo;ll need a container engine on your machine&amp;mdash;this article uses Docker. Next, see &lt;a href="https://github.com/mviereck/x11docker#installation-from-distribution-repositories">x11docker documentation&lt;/a> for installation instructions. x11docker may be available as a package for your distribution, or you can install manually.&lt;/p>
&lt;p>It&amp;rsquo;s worth mentioning that x11docker is crazy smart about other dependencies. If these dependencies already exist on your system (like Xephyr, &lt;code>xinit&lt;/code>, &lt;code>xclip&lt;/code>, etc.), they will be used. For any dependencies not installed, x11docker will automatically use dependencies from a container image created for this purpose.&lt;/p>
&lt;p>Next up, we need a Dockerfile to describe the GNOME image.&lt;/p>
&lt;h1 id="x11docker-gnome-dockerfile">x11docker GNOME Dockerfile&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-docker" data-lang="docker">&lt;span class="line">&lt;span class="cl">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> fedora:36&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> dnf -y update &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> dnf -y install &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> @base-x &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> dbus-x11 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> gnome-session &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> gnome-shell &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> gnome-terminal &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> gnome-extensions-app &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> nautilus &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> mesa-libGL &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> mesa-dri-drivers &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> dnf -y remove gnome-tour &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> dnf clean all&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> gnome-session&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It took a lot of experimentation to get here, but this Dockerfile is all that is needed. A few points to note:&lt;/p>
&lt;ul>
&lt;li>We choose to use Fedora because it conveniently has an almost one-to-one relationship with stable GNOME versions. In this case, Fedora 36 uses GNOME 42.&lt;/li>
&lt;li>&lt;code>@base-x&lt;/code> provides minimal X11 support. &lt;code>gnome-session&lt;/code> and &lt;code>gnome-shell&lt;/code> are added, along with Terminal, Gnome Extensions App, and Nautilus.&lt;/li>
&lt;li>Mesa drivers are installed in case you&amp;rsquo;d like to use the &lt;code>--gpu&lt;/code> flag with x11docker.&lt;/li>
&lt;li>&lt;code>gnome-tour&lt;/code> is removed because it wants to take you on a tour every time the session starts. No more tours, please!&lt;/li>
&lt;li>The last line starts up GNOME. We use &lt;code>gnome-session&lt;/code> instead of &lt;code>gnome-shell&lt;/code>, since &lt;code>gnome-session&lt;/code> starts up numerous components on which our extension may depend.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># These components are started up with gnome-session.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Source: /usr/share/gnome-session/sessions/gnome.session&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">org.gnome.Shell&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">org.gnome.SettingsDaemon.A11ySettings&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">org.gnome.SettingsDaemon.Color&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">org.gnome.SettingsDaemon.Datetime&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">org.gnome.SettingsDaemon.Housekeeping&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">org.gnome.SettingsDaemon.Keyboard&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">org.gnome.SettingsDaemon.MediaKeys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">org.gnome.SettingsDaemon.Power&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">org.gnome.SettingsDaemon.PrintNotifications&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">org.gnome.SettingsDaemon.Rfkill&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">org.gnome.SettingsDaemon.ScreensaverProxy&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">org.gnome.SettingsDaemon.Sharing&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">org.gnome.SettingsDaemon.Smartcard&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">org.gnome.SettingsDaemon.Sound&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">org.gnome.SettingsDaemon.UsbProtection&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">org.gnome.SettingsDaemon.Wacom&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">org.gnome.SettingsDaemon.XSettings&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here&amp;rsquo;s a list of Fedora versions with corresponding GNOME versions (as of December 5, 2022), along with any modifications required to the base Dockerfile shown above:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Fedora version&lt;/th>
&lt;th style="text-align: left">GNOME version&lt;/th>
&lt;th style="text-align: left">&lt;/th>
&lt;th style="text-align: left">&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">38&lt;/td>
&lt;td style="text-align: left">43.1&lt;/td>
&lt;td style="text-align: left">§&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">36&lt;/td>
&lt;td style="text-align: left">42.4&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">35&lt;/td>
&lt;td style="text-align: left">41.6&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">34&lt;/td>
&lt;td style="text-align: left">40.9&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">33&lt;/td>
&lt;td style="text-align: left">3.38.5&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">32&lt;/td>
&lt;td style="text-align: left">3.36.9&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">31&lt;/td>
&lt;td style="text-align: left">3.34.8&lt;/td>
&lt;td style="text-align: left">Δ&lt;/td>
&lt;td style="text-align: left">†&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">30&lt;/td>
&lt;td style="text-align: left">3.32.2&lt;/td>
&lt;td style="text-align: left">Δ&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">29&lt;/td>
&lt;td style="text-align: left">3.30.2&lt;/td>
&lt;td style="text-align: left">Δ&lt;/td>
&lt;td style="text-align: left">‡&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">28&lt;/td>
&lt;td style="text-align: left">3.28.2&lt;/td>
&lt;td style="text-align: left">Δ&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">27&lt;/td>
&lt;td style="text-align: left">3.26.2&lt;/td>
&lt;td style="text-align: left">Δ&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">26&lt;/td>
&lt;td style="text-align: left">3.24.2&lt;/td>
&lt;td style="text-align: left">Δ&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>§ Both Fedora 37 and 38 run GNOME 43, so I just used the newest of the two.&lt;/li>
&lt;li>Δ Predates &lt;code>gnome-extensions-app&lt;/code>, so don&amp;rsquo;t install this package. The binary &lt;code>gnome-shell-extension-prefs&lt;/code> is bundled with &lt;code>gnome-shell&lt;/code> instead.&lt;/li>
&lt;li>† &lt;code>systemd-login&lt;/code> refuses to start without a patch to &lt;code>systemd-login.service&lt;/code>.&lt;/li>
&lt;li>‡ Requires a polkit patch to stop requesting authentication to create a managed color device on start.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>What about versions of GNOME prior to 3.24.2?&lt;/strong> In short, x11docker was refusing to boot GNOME on Fedora 25, and I figured the need to support pre-2017 setups is quite low. If you can get it working, please let me know!&lt;/p>
&lt;h1 id="x11docker-command-line-options">x11docker command-line options&lt;/h1>
&lt;p>The actual invocation of &lt;code>x11docker&lt;/code> is slightly more involved, and may need some customization depending on your goals:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">x11docker &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --verbose &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --xephyr &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --desktop &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --size&lt;span class="o">=&lt;/span>1600x1200 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --sudouser &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --clipboard &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --init&lt;span class="o">=&lt;/span>systemd &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --dbus &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --network&lt;span class="o">=&lt;/span>host &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --share&lt;span class="o">=&lt;/span>/run/udev/control &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --share&lt;span class="o">=&lt;/span>/sys/class/some/device &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --share&lt;span class="o">=&lt;/span>&lt;span class="nv">$HOME&lt;/span>/.local/share/gnome-shell/extensions &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --runasuser&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;ln -s /home.host/.local/share/gnome-shell/extensions ~/.local/share/gnome-shell&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --runasuser&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;gsettings set org.gnome.desktop.interface scaling-factor 2&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --runasuser&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;gsettings set org.gnome.desktop.wm.keybindings panel-run-dialog \&amp;#34;[&amp;#39;\\\\&amp;lt;Alt\\\\&amp;gt;F2&amp;#39;,&amp;#39;\\\\&amp;lt;Shift\\\\&amp;gt;F2&amp;#39;]\&amp;#34;&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --runasuser&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;gsettings set org.gnome.desktop.input-sources sources \&amp;#34;`gsettings get org.gnome.desktop.input-sources sources`\&amp;#34;&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --runasuser&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;touch .local/share/gnome-shell/lock-warning-shown&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --xtest &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -- &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --cap-add&lt;span class="o">=&lt;/span>SYS_NICE &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -- &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> gnome-shell-43
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here&amp;rsquo;s an explanation of each line:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">x11docker &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --verbose &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Invoke x11docker with the verbose flag. This means we won&amp;rsquo;t need to bother with &lt;code>journalctl&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> --xephyr &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --desktop &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --size&lt;span class="o">=&lt;/span>1600x1200 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Use the Xephyr X server, which runs in a nested window, and waits for a connection from &lt;code>gnome-shell&lt;/code>. &lt;code>--xpra&lt;/code> and &lt;code>--weston-xwayland&lt;/code> also work reasonably well, and even allow dynamic resizing of the desktop. But &lt;code>--xephyr&lt;/code> is the only option that allows using a key combination (Ctrl+Shift) to grab the keyboard/mouse, which can be quite useful to avoid shortcuts getting intercepted by the host GNOME session. There are also a bunch of other Wayland modes you can play with. Check out &lt;a href="https://github.com/mviereck/x11docker/wiki/X-server-and-Wayland-Options">x11docker documentation&lt;/a> and find what works best with your setup.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> --sudouser &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --clipboard &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Allow becoming the root user (the password is &lt;code>x11docker&lt;/code>), and enable clipboard for copying text to and from the container.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> --init&lt;span class="o">=&lt;/span>systemd &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --dbus &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>GNOME is heavily dependent on dbus. It also needs an initialization system to run properly. Use systemd since it is most widely supported.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> --network&lt;span class="o">=&lt;/span>host &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --share&lt;span class="o">=&lt;/span>/run/udev/control &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --share&lt;span class="o">=&lt;/span>/sys/class/some/device &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This one trumped me for a really long time, until I finally ran across this &lt;a href="https://dummdida.tumblr.com/post/121087781445/re-udev-events-in-a-container">terse blog post&lt;/a>. If you are doing development which interacts with hardware in some way, you will likely need this section.&lt;/p>
&lt;p>The first two lines are necessary to get udev events sent into the container. This gives GNOME access to events such as when an external hard drive is connected, or when brightness of the screen is adjusted. The last line is to allow write access to some device in the system. For example, controlling the WiFi module, or turning on the camera.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> --share&lt;span class="o">=&lt;/span>&lt;span class="nv">$HOME&lt;/span>/.local/share/gnome-shell/extensions &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --runasuser&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;ln -s /home.host/.local/share/gnome-shell/extensions ~/.local/share/gnome-shell&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Share the host&amp;rsquo;s GNOME extensions directory. Note that the first line doesn&amp;rsquo;t actually work due to a bug in x11docker. I&amp;rsquo;ve uploaded a fix to this &lt;a href="https://github.com/mviereck/x11docker/issues/475">x11docker issue&lt;/a>, but in the meantime, a workaround is to run &lt;code>ln&lt;/code> manually with &lt;code>--runasuser&lt;/code> (the second line).&lt;/p>
&lt;p>Also note that you don&amp;rsquo;t necessarily have to share the same extensions directory as the host&amp;mdash;you could also create a separate directory entirely.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> --runasuser&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;gsettings set org.gnome.desktop.interface scaling-factor 2&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --runasuser&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;gsettings set org.gnome.desktop.wm.keybindings panel-run-dialog \&amp;#34;[&amp;#39;\\\\&amp;lt;Alt\\\\&amp;gt;F2&amp;#39;,&amp;#39;\\\\&amp;lt;Shift\\\\&amp;gt;F2&amp;#39;]\&amp;#34;&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --runasuser&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;gsettings set org.gnome.desktop.input-sources sources \&amp;#34;`gsettings get org.gnome.desktop.input-sources sources`\&amp;#34;&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --runasuser&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;touch .local/share/gnome-shell/lock-warning-shown&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Make GNOME slightly more usable in the container. Enable HiDPI scaling (if your screen has a decent DPI). Allow use of Shift+F2 to bring up the Run dialog, which is useful since Alt+F2 is intercepted by the host. Use keyboard layout specified by the host (since I use Dvorak). (Four is the magic number of backslashes needed here, due to the way x11docker handles these strings.) Don&amp;rsquo;t show the &amp;ldquo;No lock screen&amp;rdquo; warning when &lt;code>gnome-shell&lt;/code> starts.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> --xtest &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Enable the XTEST extension in X, which is required by &lt;code>/usr/lib/gsd-power&lt;/code> in GNOME versions 3.30 and under.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> -- &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --cap-add&lt;span class="o">=&lt;/span>SYS_NICE &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Everything after the first &lt;code>--&lt;/code> is sent directly to the container engine (Docker by default). Add the &lt;code>SYS_NICE&lt;/code> capability, which is required to run the &lt;code>gnome-shell&lt;/code> binary for versions 3.38 and under.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> -- &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> gnome-shell-43
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After the second &lt;code>--&lt;/code> comes the image name, and then the command to run. The command defaults to whatever follows &lt;code>CMD&lt;/code> in the Dockerfile (in our case, &lt;code>gnome-session&lt;/code>), so we don&amp;rsquo;t need to specify that here.&lt;/p>
&lt;p>WHEW! That was a mouthful.&lt;/p>
&lt;h1 id="simplify-invocation">Simplify invocation&lt;/h1>
&lt;p>To simplify the whole process of starting up a GNOME container with x11docker, I created the GitHub repo &lt;a href="https://github.com/jkitching/x11docker-gnome">jkitching/x11docker-gnome&lt;/a>. In it, you will find the following files:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>gnome-shell-XYZ.Dockerfile:&lt;/strong> The Dockerfile necessary to build a container image for GNOME XYZ. Mostly they are identical, except for the differences mentioned in the table above. I went against the grain here and didn&amp;rsquo;t create a separate directory for each one.&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://github.com/jkitching/x11docker-gnome/blob/main/Makefile">Makefile&lt;/a>:&lt;/strong> The Makefile allows building, pushing, pulling, and running of each image. Running in this case is just invoking &lt;code>/bin/bash&lt;/code>&amp;mdash;for starting with x11docker, see &lt;code>run-gnome-desktop.sh.template&lt;/code>.&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://github.com/jkitching/x11docker-gnome/blob/main/run-gnome-desktop.sh.template">run-gnome-desktop.sh.template&lt;/a>:&lt;/strong> Rather than relying on your shell history to store the above huge x11docker invocations, copy this shell script template and make adjustments for your specific use case.&lt;/li>
&lt;/ul>
&lt;p>The recommended workflow is as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Pull all images from Docker Hub:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># docker.io/jkitching/gnome-shell-XYZ&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">make pull all
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Copy the run shell script template&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp run-gnome-desktop.sh.template run-gnome-desktop.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chmod +x run-gnome-desktop.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Make modifications as necessary&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vim run-gnome-desktop.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Start GNOME container with x11docker&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./run-gnome-desktop.sh gnome-shell-39
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>x11docker also has a pretty neat way of saving command-line option templates in &lt;code>~/.config/x11docker/preset&lt;/code>, but unfortunately using this method precludes dynamically generating arguments such as the &lt;code>org.gnome.desktop.input-sources&lt;/code> setting above. Check out the &lt;a href="https://github.com/mviereck/x11docker#preconfiguration-with---preset">Preconfiguration with &lt;code>--preset&lt;/code>&lt;/a> section of documentation for details.&lt;/p>
&lt;h1 id="go-forth-and-conquer-the-gnomes">Go forth and conquer the GNOMEs&lt;/h1>
&lt;p>Now that we have the ability to run a containerized &lt;code>gnome-shell&lt;/code> of any arbitrary version, development becomes much simpler. For example, when validating that your extension works in previous versions of GNOME, simply start up a container, enable the extension, test functionality, and make a few fixes along the way.&lt;/p>
&lt;p>Now go forth, be brave, and use the power of containers to supercharge your GNOME development!&lt;/p>
&lt;h1 id="addendum">Addendum&lt;/h1>
&lt;ul>
&lt;li>Each Linux system is set up differently, running on unique hardware configurations. As such, it&amp;rsquo;s highly likely you may encounter some difficulty in getting the GNOME containers to start up properly on your system. Play around with command-line options, search Google liberally, and check out x11docker&amp;rsquo;s detailed &lt;a href="https://github.com/mviereck/x11docker">README documentation&lt;/a> and &lt;a href="https://github.com/mviereck/x11docker/wiki">GitHub Wiki&lt;/a>.&lt;/li>
&lt;li>I briefly considered grabbing specific versions of &lt;code>gnome-shell&lt;/code> from the Fedora &lt;a href="https://koji.fedoraproject.org/koji/packageinfo?packageID=9009">&amp;ldquo;koji&amp;rdquo; build system&lt;/a>. Which would be super cool&amp;mdash;instant access to a running GNOME instance of &lt;em>any&lt;/em> version, not just the latest stable versions. But realistically, unless someone is tracking down a very specific GNOME bug, I don&amp;rsquo;t think there are many use cases. Maybe next time!&lt;/li>
&lt;li>&lt;a href="https://github.com/Schneegans/gnome-shell-pod">Schneegans/gnome-shell-pod&lt;/a> provides &lt;code>gnome-shell&lt;/code> containers for automated testing of GNOME extensions on different GNOME versions. There is a decent amount of overlap here, and perhaps some collaboration could be in order.&lt;/li>
&lt;/ul></description></item><item><title>A brief foray into GNOME extension development</title><link>https://joelkitching.com/writing/gnome-extension-dev/</link><pubDate>Sat, 26 Nov 2022 00:00:00 +0800</pubDate><guid>https://joelkitching.com/writing/gnome-extension-dev/</guid><description>&lt;p>I used to be an exclusive user of tiling window managers, namely: &lt;a href="https://xmonad.org/">xmonad&lt;/a>. When I converted over to the GNOME world, I tried all of the window tiling extensions and settled on the excellent &lt;a href="https://github.com/paperwm/PaperWM">PaperWM&lt;/a>. But PaperWM, as with most GNOME extensions, struggled to keep up with the rapid pace of GNOME releases, and I was stuck on vanilla GNOME for some time.&lt;/p>
&lt;p>Recently, Arch pushed the GNOME 43 release, and, surprise! I lost another extension that I have come to love: Philippe Troin&amp;rsquo;s &lt;a href="https://github.com/F-i-f/soft-brightness">Soft Brightness&lt;/a>. This extension takes the existing brightness control in GNOME, and extends the darkest setting past the limits of the physical display by adjusting gamma settings. (In other words, it prevents you from going blind when working in a dark room.) There was an &lt;a href="https://github.com/F-i-f/soft-brightness/issues/58">open issue for GNOME 43 support&lt;/a> on the Soft Brightness GitHub page, but before I wrote this post, no progress had yet been made. Rather than downgrading GNOME and waiting patiently, I decided to take matters into my own hands.&lt;/p>
&lt;p>
&lt;img src="soft-brightness-settings.png" alt="Settings dialog of GNOME Soft Brightness extension">
&lt;/p>
&lt;h1 id="update-metadatajson-and-hope-for-the-best">Update &lt;code>metadata.json&lt;/code> and hope for the best&lt;/h1>
&lt;p>First of all, let&amp;rsquo;s clone the Soft Brightness repository, and update &lt;code>metadata.json&lt;/code> to claim support for GNOME 43.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="line">&lt;span class="cl">&lt;span class="gh">diff --git a/src/metadata.json.in b/src/metadata.json.in
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gh">index e4af9c3..33595f6 100644
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gh">&lt;/span>&lt;span class="gd">--- a/src/metadata.json.in
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">&lt;/span>&lt;span class="gi">+++ b/src/metadata.json.in
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span>&lt;span class="gu">@@ -12,7 +12,8 @@
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gu">&lt;/span> &amp;#34;3.38&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;40&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;41&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">- &amp;#34;42&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">&lt;/span>&lt;span class="gi">+ &amp;#34;42&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;#34;43&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;url&amp;#34;: &amp;#34;https://github.com/F-i-f/soft-brightness&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;uuid&amp;#34;: &amp;#34;@uuid@&amp;#34;,
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The documentation shows the incantation to build and install the extension: &lt;code>meson build &amp;amp;&amp;amp; ninja -C build install&lt;/code>. Great! Let&amp;rsquo;s re-enable the extension and see what happens.&lt;/p>
&lt;p>
&lt;img src="extensions-error.png" alt="Soft Brightness extension encounters an error when enabled">
&lt;/p>
&lt;p>Okay&amp;hellip; so that didn&amp;rsquo;t work very well. There&amp;rsquo;s something wrong with AggregateMenu. Coincidentally, the guide for &lt;a href="https://gjs.guide/extensions/upgrading/gnome-shell-43.html#quick-settings">porting extensions to GNOME 43&lt;/a> mentions that AggregateMenu has been replaced with QuickSettings. No problem! We just need to search-and-replace a few strings, and the extension is ready for action. But&amp;hellip; seems like there&amp;rsquo;s no way to &amp;ldquo;reload&amp;rdquo; the extension in a running GNOME session.&lt;/p>
&lt;h1 id="reload-gnome-extensions">Reload GNOME extensions&lt;/h1>
&lt;p>GNOME might not allow reloading extensions dynamically, but there is a simple workaround: reload &lt;code>gnome-shell&lt;/code> instead. For all of you X11 users, go ahead and press Alt+F2 right now, type the &lt;code>r&lt;/code> command, and hit &amp;lt;Enter&amp;gt;. Tah-dah! For all of you Wayland users&amp;hellip; I feel your pain.&lt;/p>
&lt;p>
&lt;img src="run-command.png" alt="GNOME Run Command dialog">
&lt;/p>
&lt;p>Whereas X11 architecture separates the X server (e.g. Xorg) from the compositor (e.g. Mutter or &lt;code>gnome-shell&lt;/code>), Wayland architecture merges the two, and &lt;code>gnome-shell&lt;/code> also takes on the equivalent role of an X server. &lt;a href="https://wayland.freedesktop.org/docs/html/ch03.html#sect-Wayland-Architecture-wayland_architecture">(More reading for those interested.)&lt;/a> Thus, reloading &lt;code>gnome-shell&lt;/code> in Wayland effectively brings down the entire session along with all of your running applications.&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="x-architecture.png" alt="X11 architecture diagram">
&lt;figcaption>In Wayland, (4) X Server and (5) Compositor are merged.&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>Apparently it&amp;rsquo;s pretty easy to run a nested &lt;code>gnome-shell&lt;/code> in Wayland, but it seems to have a lot of strange issues. For example, opening up most applications from the nested window results in them being opened in&amp;hellip; the parent &lt;code>gnome-shell&lt;/code>. Huh? Also, there is no brightness control in the nested window, which is pretty important if we are to get Soft Brightness working. So&amp;hellip; until we figure out &lt;a href="https://joelkitching.com/writing/x11docker-gnome-containers/">how to get containers involved&lt;/a>, I&amp;rsquo;m sad to say that the easiest route is to temporarily switch over to an X11 session.&lt;/p>
&lt;h1 id="set-up-the-development-environment">Set up the development environment&lt;/h1>
&lt;p>Once there, we can get our development workflow going:&lt;/p>
&lt;ol>
&lt;li>Make changes to the extension source code&lt;/li>
&lt;li>&lt;code>ninja -C build install&lt;/code>&lt;/li>
&lt;li>Alt+F2, &lt;code>r&lt;/code> &amp;lt;Enter&amp;gt;&lt;/li>
&lt;li>Close and re-open &lt;code>gnome-extensions-app&lt;/code>&lt;/li>
&lt;li>Attempt to enable extension&lt;/li>
&lt;/ol>
&lt;p>
&lt;img src="dev-workflow.png" alt="GNOME development workflow screenshot">
&lt;/p>
&lt;p>Or for those who enjoy stringing commands together and avoiding tinkering with the UI:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ gnome-extensions disable soft-brightness@fifi.org &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> ninja -C build install &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> killall -HUP gnome-shell &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> sleep &lt;span class="m">3&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> gnome-extensions &lt;span class="nb">enable&lt;/span> soft-brightness@fifi.org
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Sometimes the one-line error provided by &lt;code>gnome-extensions-app&lt;/code> is enough to track down the latest error. But we can get more information (a full stack trace) by watching &lt;code>gnome-shell&lt;/code> logs while reloading extensions. On a systemd-based distribution, that amounts to running &lt;code>journalctl -f _COMM=gnome-shell&lt;/code>.&lt;/p>
&lt;h1 id="explore-with-looking-glass">Explore with Looking Glass&lt;/h1>
&lt;p>I quickly discovered that &lt;code>s/AggregateMenu/QuickSettings/g&lt;/code> wasn&amp;rsquo;t going to cut it. My heart yearned for Chrome Developer Tools, which lets you click a UI element to inspect its properties and position in the DOM. And then the heavenly words appeared, glowing softly in my Google search results: &lt;a href="https://wiki.gnome.org/Projects/GnomeShell/LookingGlass">Looking Glass&lt;/a>. Although nowhere near as advanced as Developer Tools, it allows us to inspect the JavaScript world of a running instance of &lt;code>gnome-shell&lt;/code>, and interactively make modifications.&lt;/p>
&lt;p>Looking Glass is accessible via Alt+F2 and then &lt;code>lg&lt;/code>. Honestly, it&amp;rsquo;s somewhat frustrating to use, since it blocks interaction with the UI until closed with &amp;lt;Esc&amp;gt;. But for our purposes, it should be more than sufficient.&lt;/p>
&lt;p>
&lt;img src="looking-glass.png" alt="Looking Glass dialog">
&lt;/p>
&lt;p>To familiarize ourselves with QuickSettings, let&amp;rsquo;s see if we can remove the brightness indicator. In order to figure out the correct set of instructions, we refer to (1) existing Soft Brightness code, (2) the commit used to convert the brightness indicator over to QuickSettings (&lt;a href="https://gitlab.gnome.org/GNOME/gnome-shell/-/commit/7bbd59838a6cfe14b189fa7bd8e743fb0cac9bc3">status/brightness: Port to quick settings&lt;/a>), and (3) an extension for customizing QuickSettings (&lt;a href="https://github.com/qwreey75/quick-settings-tweaks/blob/e7eab279bbe2cfaeb59a7068808166ac7c5c046d/features/dndQuickToggle.js">Quick Settings Tweaker&lt;/a>). We lather liberally with trial and error, and come out with this JavaScript sequence:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">QS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">imports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ui&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">main&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">panel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">statusArea&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">quickSettings&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">QS&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_settings&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">bi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">quickSettingsItems&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">bi&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_proxy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">run_dispose&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">bi&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get_parent&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">remove_child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">bi&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get_parent&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">remove_child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">destroy&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;img src="quick-settings-no-brightness.png" alt="QuickSettings without brightness indicator">
&lt;/p>
&lt;p>And&amp;hellip; it&amp;rsquo;s gone! Well, that&amp;rsquo;s rather satisfying, but slightly awkward. Let&amp;rsquo;s reload &lt;code>gnome-shell&lt;/code> to get it back. (Again, sorry Wayland users!)&lt;/p>
&lt;h1 id="current-strategy-used-by-soft-brightness">Current strategy used by Soft Brightness&lt;/h1>
&lt;p>In current Soft Brightness code, the brightness indicator class is extended, and functions are overridden to serve the extension&amp;rsquo;s needs. When the extension is enabled, the modified class is instantiated, and the existing brightness indicator is swapped out with the modified one:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">Indicator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">imports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ui&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">brightness&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Indicator&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">ModifiedBrightnessIndicator&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">Indicator&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_sliderChanged&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">slider&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_sync&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It turns out that in the process of converting the brightness indicator to QuickSettings &lt;a href="https://gitlab.gnome.org/GNOME/gnome-shell/-/commit/7bbd59838a6cfe14b189fa7bd8e743fb0cac9bc3#e220cd54002c151792a62cbc832b05dd3ad65ad0_20_16">(GitLab commit)&lt;/a>, the &lt;code>Indicator&lt;/code> class was renamed, made private, and hidden behind a wrapper class called &lt;code>SystemIndicator&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Class is private to this module and not exported
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">class&lt;/span> &lt;span class="nx">BrightnessItem&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">QuickSlider&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_sliderChanged&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">slider&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_sync&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Class is exported as imports.ui.status.brightness.Indicator
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">class&lt;/span> &lt;span class="nx">Indicator&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">SystemIndicator&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_init&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">quickSettingsItems&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nx">BrightnessItem&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Rather than completely re-implementing the new &lt;code>BrightnessItem&lt;/code> class and dealing with spaghetti code for handling &lt;code>gnome-shell&lt;/code> 42/43 differences, we take a different approach: monkey patching.&lt;/p>
&lt;h1 id="monkey-patching-the-brightness-indicator">Monkey patching the brightness indicator&lt;/h1>
&lt;p>Although monkey patching is generally frowned upon, it can be useful in an environment where extensibility is limited.&lt;/p>
&lt;p>Instead of swapping out a completely new brightness indicator object, we keep the existing brightness indicator in tact, but modify its behaviour while the Soft Brightness extension is enabled.&lt;/p>
&lt;p>We implement two functions to perform the monkey patching and restoration when the extension is disabled, taking care to &lt;strong>&lt;code>bind()&lt;/code>&lt;/strong> our function&amp;rsquo;s &lt;code>this&lt;/code> variable to the indicator object itself:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">_enableBrightnessIndicatorPatch&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">indicator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_brightnessIndicator&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">indicator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">__orig__slider_changed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">indicator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_slider_changed&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">indicator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_slider_changed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="p">}).&lt;/span>&lt;span class="nx">bind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">indicator&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">_disableBrightnessIndicatorPatch&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">indicator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_brightnessIndicator&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">indicator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setSliderValue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">indicator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">__orig__setSliderValue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="nx">indicator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">__orig_setSliderValue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="trouble-with-brightnessproxy">Trouble with &lt;code>BrightnessProxy&lt;/code>&lt;/h1>
&lt;p>This strategy works great. However, the extension exhibits some strange behaviour in GNOME 42 and below. It turns out that despite swapping out the &lt;code>_sync&lt;/code> function, the Brightness proxy (used for setting and accessing system backlight brightness) still calls the old function! What&amp;rsquo;s going on here?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">BrightnessItem&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">QuickSlider&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_init&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_proxy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">BrightnessProxy&lt;/span>&lt;span class="p">(...,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">proxy&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_proxy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">connect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;g-properties-changed&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// This _sync call is causing our headache.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_sync&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This bit of code is &lt;strong>exactly&lt;/strong> the same in both GNOME versions 42 and 43. Barring some part of the JS spec that I&amp;rsquo;m missing (totally possible), the only natural conclusion is that there is some bug in how GNOME 42&amp;rsquo;s JavaScript engine (SpiderMonkey) handles the &amp;ldquo;this&amp;rdquo; keyword w.r.t. arrow functions. &lt;strong>If anyone &lt;em>does&lt;/em> have some conclusive information, I would love to hear from you!&lt;/strong>&lt;/p>
&lt;p>Unfortunately, we can&amp;rsquo;t change the proxy&amp;rsquo;s callback function on-the-fly. So, our best course of action is to destroy and re-create the proxy, with a callback function that reliably calls the currently-used &lt;code>_sync&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">indicator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_proxy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">run_dispose&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">indicator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_proxy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">BrightnessProxy&lt;/span>&lt;span class="p">(...,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">proxy&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_proxy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">connect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;g-properties-changed&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_sync&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}).&lt;/span>&lt;span class="nx">bind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">indicator&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that we have to convert the function passed to &lt;code>BrightnessProxy&lt;/code> to the form &lt;code>(function(x, y) {...})&lt;/code> in order to call &lt;strong>&lt;code>bind()&lt;/code>&lt;/strong>. And this fixes our issue!&lt;/p>
&lt;h1 id="clean-up-document-and-upload-changes">Clean up, document, and upload changes&lt;/h1>
&lt;p>This is the most important part. I extensively document the problems encountered with &lt;code>BrightnessProxy&lt;/code>, author a commit message explaining the rationale behind using monkey patching, and create a &lt;a href="https://github.com/F-i-f/soft-brightness/pull/59">GitHub pull request&lt;/a>. And we&amp;rsquo;re done!&lt;/p>
&lt;p>There is one point that I conveniently glossed over: testing the GNOME extension in previous versions of GNOME&amp;hellip; how did I do that? Let&amp;rsquo;s look at GNOME containerization in the next post, &lt;a href="https://joelkitching.com/writing/x11docker-gnome-containers/">GNOME development with x11docker containers&lt;/a>.&lt;/p></description></item></channel></rss>